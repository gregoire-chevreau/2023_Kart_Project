
Projetkart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044f0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080046c8  080046c8  000146c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004708  08004708  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004708  08004708  00014708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004710  08004710  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004710  08004710  00014710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004714  08004714  00014714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000000c  08004724  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08004724  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016251  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d31  00000000  00000000  000362d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  00039008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f97  00000000  00000000  0003a420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000214de  00000000  00000000  0003b3b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c39  00000000  00000000  0005c895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db4bf  00000000  00000000  000754ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055c8  00000000  00000000  00150990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00155f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080046b0 	.word	0x080046b0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080046b0 	.word	0x080046b0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08c      	sub	sp, #48	; 0x30
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800051a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2220      	movs	r2, #32
 800052a:	2100      	movs	r1, #0
 800052c:	4618      	mov	r0, r3
 800052e:	f004 f893 	bl	8004658 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000532:	4b32      	ldr	r3, [pc, #200]	; (80005fc <MX_ADC1_Init+0xe8>)
 8000534:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000538:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800053a:	4b30      	ldr	r3, [pc, #192]	; (80005fc <MX_ADC1_Init+0xe8>)
 800053c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000540:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000542:	4b2e      	ldr	r3, [pc, #184]	; (80005fc <MX_ADC1_Init+0xe8>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000548:	4b2c      	ldr	r3, [pc, #176]	; (80005fc <MX_ADC1_Init+0xe8>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800054e:	4b2b      	ldr	r3, [pc, #172]	; (80005fc <MX_ADC1_Init+0xe8>)
 8000550:	2200      	movs	r2, #0
 8000552:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000554:	4b29      	ldr	r3, [pc, #164]	; (80005fc <MX_ADC1_Init+0xe8>)
 8000556:	2200      	movs	r2, #0
 8000558:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055a:	4b28      	ldr	r3, [pc, #160]	; (80005fc <MX_ADC1_Init+0xe8>)
 800055c:	2204      	movs	r2, #4
 800055e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000560:	4b26      	ldr	r3, [pc, #152]	; (80005fc <MX_ADC1_Init+0xe8>)
 8000562:	2200      	movs	r2, #0
 8000564:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000566:	4b25      	ldr	r3, [pc, #148]	; (80005fc <MX_ADC1_Init+0xe8>)
 8000568:	2200      	movs	r2, #0
 800056a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800056c:	4b23      	ldr	r3, [pc, #140]	; (80005fc <MX_ADC1_Init+0xe8>)
 800056e:	2201      	movs	r2, #1
 8000570:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000572:	4b22      	ldr	r3, [pc, #136]	; (80005fc <MX_ADC1_Init+0xe8>)
 8000574:	2200      	movs	r2, #0
 8000576:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800057a:	4b20      	ldr	r3, [pc, #128]	; (80005fc <MX_ADC1_Init+0xe8>)
 800057c:	2200      	movs	r2, #0
 800057e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000580:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <MX_ADC1_Init+0xe8>)
 8000582:	2200      	movs	r2, #0
 8000584:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000586:	4b1d      	ldr	r3, [pc, #116]	; (80005fc <MX_ADC1_Init+0xe8>)
 8000588:	2200      	movs	r2, #0
 800058a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800058e:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <MX_ADC1_Init+0xe8>)
 8000590:	2200      	movs	r2, #0
 8000592:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000594:	4b19      	ldr	r3, [pc, #100]	; (80005fc <MX_ADC1_Init+0xe8>)
 8000596:	2200      	movs	r2, #0
 8000598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800059c:	4817      	ldr	r0, [pc, #92]	; (80005fc <MX_ADC1_Init+0xe8>)
 800059e:	f000 fed5 	bl	800134c <HAL_ADC_Init>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80005a8:	f000 fab3 	bl	8000b12 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005ac:	2300      	movs	r3, #0
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005b4:	4619      	mov	r1, r3
 80005b6:	4811      	ldr	r0, [pc, #68]	; (80005fc <MX_ADC1_Init+0xe8>)
 80005b8:	f001 fc68 	bl	8001e8c <HAL_ADCEx_MultiModeConfigChannel>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005c2:	f000 faa6 	bl	8000b12 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_ADC1_Init+0xec>)
 80005c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005ca:	2306      	movs	r3, #6
 80005cc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005d2:	237f      	movs	r3, #127	; 0x7f
 80005d4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005d6:	2304      	movs	r3, #4
 80005d8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	4619      	mov	r1, r3
 80005e2:	4806      	ldr	r0, [pc, #24]	; (80005fc <MX_ADC1_Init+0xe8>)
 80005e4:	f001 f83c 	bl	8001660 <HAL_ADC_ConfigChannel>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80005ee:	f000 fa90 	bl	8000b12 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005f2:	bf00      	nop
 80005f4:	3730      	adds	r7, #48	; 0x30
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000028 	.word	0x20000028
 8000600:	04300002 	.word	0x04300002

08000604 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b09a      	sub	sp, #104	; 0x68
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	2244      	movs	r2, #68	; 0x44
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f004 f817 	bl	8004658 <memset>
  if(adcHandle->Instance==ADC1)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000632:	d134      	bne.n	800069e <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000634:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000638:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800063a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	4618      	mov	r0, r3
 8000646:	f002 fd43 	bl	80030d0 <HAL_RCCEx_PeriphCLKConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000650:	f000 fa5f 	bl	8000b12 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000654:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <HAL_ADC_MspInit+0xa4>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000658:	4a13      	ldr	r2, [pc, #76]	; (80006a8 <HAL_ADC_MspInit+0xa4>)
 800065a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800065e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <HAL_ADC_MspInit+0xa4>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066c:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <HAL_ADC_MspInit+0xa4>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000670:	4a0d      	ldr	r2, [pc, #52]	; (80006a8 <HAL_ADC_MspInit+0xa4>)
 8000672:	f043 0301 	orr.w	r3, r3, #1
 8000676:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000678:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <HAL_ADC_MspInit+0xa4>)
 800067a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067c:	f003 0301 	and.w	r3, r3, #1
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000684:	2301      	movs	r3, #1
 8000686:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000688:	2303      	movs	r3, #3
 800068a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000690:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000694:	4619      	mov	r1, r3
 8000696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069a:	f001 fd7f 	bl	800219c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800069e:	bf00      	nop
 80006a0:	3768      	adds	r7, #104	; 0x68
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000

080006ac <PWM>:
	ADC_Value = HAL_ADC_GetValue(&hadc1);
	return ADC_Value;
}

void PWM(uint8_t Hall_A, uint8_t Hall_B, uint8_t Hall_C)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
 80006b6:	460b      	mov	r3, r1
 80006b8:	71bb      	strb	r3, [r7, #6]
 80006ba:	4613      	mov	r3, r2
 80006bc:	717b      	strb	r3, [r7, #5]
	//uint32_t wait_time = 0;
	//wait_time = alpha*X;
	if(Hall_A == 0 && Hall_B == 1 && Hall_C == 0) //attention inversion 1 si pas de champ B
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d128      	bne.n	8000716 <PWM+0x6a>
 80006c4:	79bb      	ldrb	r3, [r7, #6]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d125      	bne.n	8000716 <PWM+0x6a>
 80006ca:	797b      	ldrb	r3, [r7, #5]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d122      	bne.n	8000716 <PWM+0x6a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//AH
 80006d0:	2201      	movs	r2, #1
 80006d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d6:	4880      	ldr	r0, [pc, #512]	; (80008d8 <PWM+0x22c>)
 80006d8:	f001 fefa 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//AL
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e2:	487d      	ldr	r0, [pc, #500]	; (80008d8 <PWM+0x22c>)
 80006e4:	f001 fef4 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//BH
 80006e8:	2200      	movs	r2, #0
 80006ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ee:	487a      	ldr	r0, [pc, #488]	; (80008d8 <PWM+0x22c>)
 80006f0:	f001 feee 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);//BL
 80006f4:	2201      	movs	r2, #1
 80006f6:	2120      	movs	r1, #32
 80006f8:	4877      	ldr	r0, [pc, #476]	; (80008d8 <PWM+0x22c>)
 80006fa:	f001 fee9 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);//CH
 80006fe:	2200      	movs	r2, #0
 8000700:	2110      	movs	r1, #16
 8000702:	4875      	ldr	r0, [pc, #468]	; (80008d8 <PWM+0x22c>)
 8000704:	f001 fee4 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);//CL
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800070e:	4872      	ldr	r0, [pc, #456]	; (80008d8 <PWM+0x22c>)
 8000710:	f001 fede 	bl	80024d0 <HAL_GPIO_WritePin>
 8000714:	e0db      	b.n	80008ce <PWM+0x222>
		//HAL_Delay(wait_time);
	}
	else if (Hall_A == 0 && Hall_B == 1 && Hall_C == 1)
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d128      	bne.n	800076e <PWM+0xc2>
 800071c:	79bb      	ldrb	r3, [r7, #6]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d125      	bne.n	800076e <PWM+0xc2>
 8000722:	797b      	ldrb	r3, [r7, #5]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d122      	bne.n	800076e <PWM+0xc2>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000728:	2201      	movs	r2, #1
 800072a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800072e:	486a      	ldr	r0, [pc, #424]	; (80008d8 <PWM+0x22c>)
 8000730:	f001 fece 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800073a:	4867      	ldr	r0, [pc, #412]	; (80008d8 <PWM+0x22c>)
 800073c:	f001 fec8 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000746:	4864      	ldr	r0, [pc, #400]	; (80008d8 <PWM+0x22c>)
 8000748:	f001 fec2 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 800074c:	2200      	movs	r2, #0
 800074e:	2120      	movs	r1, #32
 8000750:	4861      	ldr	r0, [pc, #388]	; (80008d8 <PWM+0x22c>)
 8000752:	f001 febd 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2110      	movs	r1, #16
 800075a:	485f      	ldr	r0, [pc, #380]	; (80008d8 <PWM+0x22c>)
 800075c:	f001 feb8 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000766:	485c      	ldr	r0, [pc, #368]	; (80008d8 <PWM+0x22c>)
 8000768:	f001 feb2 	bl	80024d0 <HAL_GPIO_WritePin>
 800076c:	e0af      	b.n	80008ce <PWM+0x222>
		//HAL_Delay(wait_time);
	}
	else if (Hall_A == 0 && Hall_B == 0 && Hall_C == 1)
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d128      	bne.n	80007c6 <PWM+0x11a>
 8000774:	79bb      	ldrb	r3, [r7, #6]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d125      	bne.n	80007c6 <PWM+0x11a>
 800077a:	797b      	ldrb	r3, [r7, #5]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d122      	bne.n	80007c6 <PWM+0x11a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000786:	4854      	ldr	r0, [pc, #336]	; (80008d8 <PWM+0x22c>)
 8000788:	f001 fea2 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000792:	4851      	ldr	r0, [pc, #324]	; (80008d8 <PWM+0x22c>)
 8000794:	f001 fe9c 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800079e:	484e      	ldr	r0, [pc, #312]	; (80008d8 <PWM+0x22c>)
 80007a0:	f001 fe96 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2120      	movs	r1, #32
 80007a8:	484b      	ldr	r0, [pc, #300]	; (80008d8 <PWM+0x22c>)
 80007aa:	f001 fe91 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2110      	movs	r1, #16
 80007b2:	4849      	ldr	r0, [pc, #292]	; (80008d8 <PWM+0x22c>)
 80007b4:	f001 fe8c 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007be:	4846      	ldr	r0, [pc, #280]	; (80008d8 <PWM+0x22c>)
 80007c0:	f001 fe86 	bl	80024d0 <HAL_GPIO_WritePin>
 80007c4:	e083      	b.n	80008ce <PWM+0x222>
		//HAL_Delay(wait_time);
	}
	else if (Hall_A == 1 && Hall_B == 0 && Hall_C == 1)
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d128      	bne.n	800081e <PWM+0x172>
 80007cc:	79bb      	ldrb	r3, [r7, #6]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d125      	bne.n	800081e <PWM+0x172>
 80007d2:	797b      	ldrb	r3, [r7, #5]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d122      	bne.n	800081e <PWM+0x172>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007de:	483e      	ldr	r0, [pc, #248]	; (80008d8 <PWM+0x22c>)
 80007e0:	f001 fe76 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 80007e4:	2201      	movs	r2, #1
 80007e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ea:	483b      	ldr	r0, [pc, #236]	; (80008d8 <PWM+0x22c>)
 80007ec:	f001 fe70 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 80007f0:	2201      	movs	r2, #1
 80007f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007f6:	4838      	ldr	r0, [pc, #224]	; (80008d8 <PWM+0x22c>)
 80007f8:	f001 fe6a 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2120      	movs	r1, #32
 8000800:	4835      	ldr	r0, [pc, #212]	; (80008d8 <PWM+0x22c>)
 8000802:	f001 fe65 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2110      	movs	r1, #16
 800080a:	4833      	ldr	r0, [pc, #204]	; (80008d8 <PWM+0x22c>)
 800080c:	f001 fe60 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000816:	4830      	ldr	r0, [pc, #192]	; (80008d8 <PWM+0x22c>)
 8000818:	f001 fe5a 	bl	80024d0 <HAL_GPIO_WritePin>
 800081c:	e057      	b.n	80008ce <PWM+0x222>
		//HAL_Delay(wait_time);
	}
	else if (Hall_A == 1 && Hall_B == 0 && Hall_C == 0)
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d128      	bne.n	8000876 <PWM+0x1ca>
 8000824:	79bb      	ldrb	r3, [r7, #6]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d125      	bne.n	8000876 <PWM+0x1ca>
 800082a:	797b      	ldrb	r3, [r7, #5]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d122      	bne.n	8000876 <PWM+0x1ca>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000836:	4828      	ldr	r0, [pc, #160]	; (80008d8 <PWM+0x22c>)
 8000838:	f001 fe4a 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 800083c:	2201      	movs	r2, #1
 800083e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000842:	4825      	ldr	r0, [pc, #148]	; (80008d8 <PWM+0x22c>)
 8000844:	f001 fe44 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800084e:	4822      	ldr	r0, [pc, #136]	; (80008d8 <PWM+0x22c>)
 8000850:	f001 fe3e 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2120      	movs	r1, #32
 8000858:	481f      	ldr	r0, [pc, #124]	; (80008d8 <PWM+0x22c>)
 800085a:	f001 fe39 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 800085e:	2201      	movs	r2, #1
 8000860:	2110      	movs	r1, #16
 8000862:	481d      	ldr	r0, [pc, #116]	; (80008d8 <PWM+0x22c>)
 8000864:	f001 fe34 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800086e:	481a      	ldr	r0, [pc, #104]	; (80008d8 <PWM+0x22c>)
 8000870:	f001 fe2e 	bl	80024d0 <HAL_GPIO_WritePin>
 8000874:	e02b      	b.n	80008ce <PWM+0x222>
		//HAL_Delay(wait_time);
	}
	else if (Hall_A == 1 && Hall_B == 1 && Hall_C == 0)
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d128      	bne.n	80008ce <PWM+0x222>
 800087c:	79bb      	ldrb	r3, [r7, #6]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d125      	bne.n	80008ce <PWM+0x222>
 8000882:	797b      	ldrb	r3, [r7, #5]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d122      	bne.n	80008ce <PWM+0x222>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800088e:	4812      	ldr	r0, [pc, #72]	; (80008d8 <PWM+0x22c>)
 8000890:	f001 fe1e 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800089a:	480f      	ldr	r0, [pc, #60]	; (80008d8 <PWM+0x22c>)
 800089c:	f001 fe18 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008a6:	480c      	ldr	r0, [pc, #48]	; (80008d8 <PWM+0x22c>)
 80008a8:	f001 fe12 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2120      	movs	r1, #32
 80008b0:	4809      	ldr	r0, [pc, #36]	; (80008d8 <PWM+0x22c>)
 80008b2:	f001 fe0d 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2110      	movs	r1, #16
 80008ba:	4807      	ldr	r0, [pc, #28]	; (80008d8 <PWM+0x22c>)
 80008bc:	f001 fe08 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c6:	4804      	ldr	r0, [pc, #16]	; (80008d8 <PWM+0x22c>)
 80008c8:	f001 fe02 	bl	80024d0 <HAL_GPIO_WritePin>
//		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
//		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
//		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
//		//HAL_Delay(wait_time);
//	}
}
 80008cc:	e7ff      	b.n	80008ce <PWM+0x222>
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	48000400 	.word	0x48000400

080008dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	4b3c      	ldr	r3, [pc, #240]	; (80009e4 <MX_GPIO_Init+0x108>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	4a3b      	ldr	r2, [pc, #236]	; (80009e4 <MX_GPIO_Init+0x108>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fe:	4b39      	ldr	r3, [pc, #228]	; (80009e4 <MX_GPIO_Init+0x108>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800090a:	4b36      	ldr	r3, [pc, #216]	; (80009e4 <MX_GPIO_Init+0x108>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	4a35      	ldr	r2, [pc, #212]	; (80009e4 <MX_GPIO_Init+0x108>)
 8000910:	f043 0320 	orr.w	r3, r3, #32
 8000914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000916:	4b33      	ldr	r3, [pc, #204]	; (80009e4 <MX_GPIO_Init+0x108>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	f003 0320 	and.w	r3, r3, #32
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b30      	ldr	r3, [pc, #192]	; (80009e4 <MX_GPIO_Init+0x108>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	4a2f      	ldr	r2, [pc, #188]	; (80009e4 <MX_GPIO_Init+0x108>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092e:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <MX_GPIO_Init+0x108>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	4b2a      	ldr	r3, [pc, #168]	; (80009e4 <MX_GPIO_Init+0x108>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	4a29      	ldr	r2, [pc, #164]	; (80009e4 <MX_GPIO_Init+0x108>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000946:	4b27      	ldr	r3, [pc, #156]	; (80009e4 <MX_GPIO_Init+0x108>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2120      	movs	r1, #32
 8000956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095a:	f001 fdb9 	bl	80024d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800095e:	2200      	movs	r2, #0
 8000960:	f24e 4130 	movw	r1, #58416	; 0xe430
 8000964:	4820      	ldr	r0, [pc, #128]	; (80009e8 <MX_GPIO_Init+0x10c>)
 8000966:	f001 fdb3 	bl	80024d0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800096a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000970:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	481a      	ldr	r0, [pc, #104]	; (80009ec <MX_GPIO_Init+0x110>)
 8000982:	f001 fc0b 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000986:	2320      	movs	r3, #32
 8000988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a0:	f001 fbfc 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB13 PB14 PB15
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80009a4:	f24e 4330 	movw	r3, #58416	; 0xe430
 80009a8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009aa:	2301      	movs	r3, #1
 80009ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	480a      	ldr	r0, [pc, #40]	; (80009e8 <MX_GPIO_Init+0x10c>)
 80009be:	f001 fbed 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80009c2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_GPIO_Init+0x110>)
 80009d8:	f001 fbe0 	bl	800219c <HAL_GPIO_Init>

}
 80009dc:	bf00      	nop
 80009de:	3728      	adds	r7, #40	; 0x28
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40021000 	.word	0x40021000
 80009e8:	48000400 	.word	0x48000400
 80009ec:	48000800 	.word	0x48000800

080009f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f6:	f000 fa3c 	bl	8000e72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fa:	f000 f83f 	bl	8000a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fe:	f7ff ff6d 	bl	80008dc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000a02:	f000 f96b 	bl	8000cdc <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8000a06:	f000 f8e9 	bl	8000bdc <MX_TIM1_Init>
  MX_ADC1_Init();
 8000a0a:	f7ff fd83 	bl	8000514 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  int value = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Hall_A = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10);
 8000a12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a16:	4815      	ldr	r0, [pc, #84]	; (8000a6c <main+0x7c>)
 8000a18:	f001 fd42 	bl	80024a0 <HAL_GPIO_ReadPin>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <main+0x80>)
 8000a22:	701a      	strb	r2, [r3, #0]
	  Hall_B = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11);
 8000a24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a28:	4810      	ldr	r0, [pc, #64]	; (8000a6c <main+0x7c>)
 8000a2a:	f001 fd39 	bl	80024a0 <HAL_GPIO_ReadPin>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <main+0x84>)
 8000a34:	701a      	strb	r2, [r3, #0]
	  Hall_C = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12);
 8000a36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3a:	480c      	ldr	r0, [pc, #48]	; (8000a6c <main+0x7c>)
 8000a3c:	f001 fd30 	bl	80024a0 <HAL_GPIO_ReadPin>
 8000a40:	4603      	mov	r3, r0
 8000a42:	461a      	mov	r2, r3
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <main+0x88>)
 8000a46:	701a      	strb	r2, [r3, #0]

	  //value = adc_value();
	  value = 1000;
 8000a48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4c:	607b      	str	r3, [r7, #4]
	  PWM(Hall_A, Hall_B, Hall_C);
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <main+0x80>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <main+0x84>)
 8000a54:	7811      	ldrb	r1, [r2, #0]
 8000a56:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <main+0x88>)
 8000a58:	7812      	ldrb	r2, [r2, #0]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fe26 	bl	80006ac <PWM>
	  HAL_Delay(value);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 fa76 	bl	8000f54 <HAL_Delay>
	  Hall_A = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10);
 8000a68:	e7d3      	b.n	8000a12 <main+0x22>
 8000a6a:	bf00      	nop
 8000a6c:	48000800 	.word	0x48000800
 8000a70:	20000094 	.word	0x20000094
 8000a74:	20000095 	.word	0x20000095
 8000a78:	20000096 	.word	0x20000096

08000a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b094      	sub	sp, #80	; 0x50
 8000a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a82:	f107 0318 	add.w	r3, r7, #24
 8000a86:	2238      	movs	r2, #56	; 0x38
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f003 fde4 	bl	8004658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f001 fd2e 	bl	8002500 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aae:	2340      	movs	r3, #64	; 0x40
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000aba:	2304      	movs	r3, #4
 8000abc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000abe:	2355      	movs	r3, #85	; 0x55
 8000ac0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aca:	2302      	movs	r3, #2
 8000acc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ace:	f107 0318 	add.w	r3, r7, #24
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 fdc8 	bl	8002668 <HAL_RCC_OscConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ade:	f000 f818 	bl	8000b12 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae2:	230f      	movs	r3, #15
 8000ae4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2104      	movs	r1, #4
 8000afa:	4618      	mov	r0, r3
 8000afc:	f002 f8cc 	bl	8002c98 <HAL_RCC_ClockConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000b06:	f000 f804 	bl	8000b12 <Error_Handler>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	3750      	adds	r7, #80	; 0x50
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b16:	b672      	cpsid	i
}
 8000b18:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <Error_Handler+0x8>

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <HAL_MspInit+0x44>)
 8000b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b26:	4a0e      	ldr	r2, [pc, #56]	; (8000b60 <HAL_MspInit+0x44>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <HAL_MspInit+0x44>)
 8000b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <HAL_MspInit+0x44>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3e:	4a08      	ldr	r2, [pc, #32]	; (8000b60 <HAL_MspInit+0x44>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b44:	6593      	str	r3, [r2, #88]	; 0x58
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_MspInit+0x44>)
 8000b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b52:	f001 fd79 	bl	8002648 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40021000 	.word	0x40021000

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <NMI_Handler+0x4>

08000b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <MemManage_Handler+0x4>

08000b76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb0:	f000 f9b2 	bl	8000f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <SystemInit+0x20>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <SystemInit+0x20>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be2:	f107 0310 	add.w	r3, r7, #16
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */
  htim1.Init.Period = (SystemCoreClock / SAMPLE_RATE) - 1;
 8000bfa:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <MX_TIM1_Init+0xb0>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a24      	ldr	r2, [pc, #144]	; (8000c90 <MX_TIM1_Init+0xb4>)
 8000c00:	fba2 2303 	umull	r2, r3, r2, r3
 8000c04:	0b5b      	lsrs	r3, r3, #13
 8000c06:	3b01      	subs	r3, #1
 8000c08:	4a22      	ldr	r2, [pc, #136]	; (8000c94 <MX_TIM1_Init+0xb8>)
 8000c0a:	60d3      	str	r3, [r2, #12]
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c0c:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <MX_TIM1_Init+0xb8>)
 8000c0e:	4a22      	ldr	r2, [pc, #136]	; (8000c98 <MX_TIM1_Init+0xbc>)
 8000c10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c12:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <MX_TIM1_Init+0xb8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c18:	4b1e      	ldr	r3, [pc, #120]	; (8000c94 <MX_TIM1_Init+0xb8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10619;
 8000c1e:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <MX_TIM1_Init+0xb8>)
 8000c20:	f642 127b 	movw	r2, #10619	; 0x297b
 8000c24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c26:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <MX_TIM1_Init+0xb8>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c2c:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <MX_TIM1_Init+0xb8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <MX_TIM1_Init+0xb8>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c38:	4816      	ldr	r0, [pc, #88]	; (8000c94 <MX_TIM1_Init+0xb8>)
 8000c3a:	f002 fc39 	bl	80034b0 <HAL_TIM_Base_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000c44:	f7ff ff65 	bl	8000b12 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c4e:	f107 0310 	add.w	r3, r7, #16
 8000c52:	4619      	mov	r1, r3
 8000c54:	480f      	ldr	r0, [pc, #60]	; (8000c94 <MX_TIM1_Init+0xb8>)
 8000c56:	f002 fc83 	bl	8003560 <HAL_TIM_ConfigClockSource>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000c60:	f7ff ff57 	bl	8000b12 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c64:	2300      	movs	r3, #0
 8000c66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	4619      	mov	r1, r3
 8000c74:	4807      	ldr	r0, [pc, #28]	; (8000c94 <MX_TIM1_Init+0xb8>)
 8000c76:	f002 fe99 	bl	80039ac <HAL_TIMEx_MasterConfigSynchronization>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000c80:	f7ff ff47 	bl	8000b12 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	3720      	adds	r7, #32
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	d1b71759 	.word	0xd1b71759
 8000c94:	20000098 	.word	0x20000098
 8000c98:	40012c00 	.word	0x40012c00

08000c9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <HAL_TIM_Base_MspInit+0x38>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d10b      	bne.n	8000cc6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <HAL_TIM_Base_MspInit+0x3c>)
 8000cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb2:	4a09      	ldr	r2, [pc, #36]	; (8000cd8 <HAL_TIM_Base_MspInit+0x3c>)
 8000cb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cb8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <HAL_TIM_Base_MspInit+0x3c>)
 8000cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40012c00 	.word	0x40012c00
 8000cd8:	40021000 	.word	0x40021000

08000cdc <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ce0:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <MX_LPUART1_UART_Init+0x8c>)
 8000ce2:	4a22      	ldr	r2, [pc, #136]	; (8000d6c <MX_LPUART1_UART_Init+0x90>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000ce6:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <MX_LPUART1_UART_Init+0x8c>)
 8000ce8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cec:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cee:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <MX_LPUART1_UART_Init+0x8c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <MX_LPUART1_UART_Init+0x8c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000cfa:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <MX_LPUART1_UART_Init+0x8c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <MX_LPUART1_UART_Init+0x8c>)
 8000d02:	220c      	movs	r2, #12
 8000d04:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <MX_LPUART1_UART_Init+0x8c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <MX_LPUART1_UART_Init+0x8c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <MX_LPUART1_UART_Init+0x8c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <MX_LPUART1_UART_Init+0x8c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000d1e:	4812      	ldr	r0, [pc, #72]	; (8000d68 <MX_LPUART1_UART_Init+0x8c>)
 8000d20:	f002 fec6 	bl	8003ab0 <HAL_UART_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d2a:	f7ff fef2 	bl	8000b12 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d2e:	2100      	movs	r1, #0
 8000d30:	480d      	ldr	r0, [pc, #52]	; (8000d68 <MX_LPUART1_UART_Init+0x8c>)
 8000d32:	f003 fbc7 	bl	80044c4 <HAL_UARTEx_SetTxFifoThreshold>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000d3c:	f7ff fee9 	bl	8000b12 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d40:	2100      	movs	r1, #0
 8000d42:	4809      	ldr	r0, [pc, #36]	; (8000d68 <MX_LPUART1_UART_Init+0x8c>)
 8000d44:	f003 fbfc 	bl	8004540 <HAL_UARTEx_SetRxFifoThreshold>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000d4e:	f7ff fee0 	bl	8000b12 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <MX_LPUART1_UART_Init+0x8c>)
 8000d54:	f003 fb7d 	bl	8004452 <HAL_UARTEx_DisableFifoMode>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000d5e:	f7ff fed8 	bl	8000b12 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200000e4 	.word	0x200000e4
 8000d6c:	40008000 	.word	0x40008000

08000d70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b09a      	sub	sp, #104	; 0x68
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	2244      	movs	r2, #68	; 0x44
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4618      	mov	r0, r3
 8000d92:	f003 fc61 	bl	8004658 <memset>
  if(uartHandle->Instance==LPUART1)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a1f      	ldr	r2, [pc, #124]	; (8000e18 <HAL_UART_MspInit+0xa8>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d136      	bne.n	8000e0e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000da0:	2320      	movs	r3, #32
 8000da2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da8:	f107 0310 	add.w	r3, r7, #16
 8000dac:	4618      	mov	r0, r3
 8000dae:	f002 f98f 	bl	80030d0 <HAL_RCCEx_PeriphCLKConfig>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000db8:	f7ff feab 	bl	8000b12 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000dbc:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <HAL_UART_MspInit+0xac>)
 8000dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dc0:	4a16      	ldr	r2, [pc, #88]	; (8000e1c <HAL_UART_MspInit+0xac>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <HAL_UART_MspInit+0xac>)
 8000dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <HAL_UART_MspInit+0xac>)
 8000dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd8:	4a10      	ldr	r2, [pc, #64]	; (8000e1c <HAL_UART_MspInit+0xac>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_UART_MspInit+0xac>)
 8000de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000dec:	230c      	movs	r3, #12
 8000dee:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000dfc:	230c      	movs	r3, #12
 8000dfe:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e04:	4619      	mov	r1, r3
 8000e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0a:	f001 f9c7 	bl	800219c <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000e0e:	bf00      	nop
 8000e10:	3768      	adds	r7, #104	; 0x68
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40008000 	.word	0x40008000
 8000e1c:	40021000 	.word	0x40021000

08000e20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e22:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e24:	480d      	ldr	r0, [pc, #52]	; (8000e5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e26:	490e      	ldr	r1, [pc, #56]	; (8000e60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e28:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <LoopForever+0xe>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e3c:	4c0b      	ldr	r4, [pc, #44]	; (8000e6c <LoopForever+0x16>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e4a:	f7ff feb5 	bl	8000bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4e:	f003 fc0b 	bl	8004668 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e52:	f7ff fdcd 	bl	80009f0 <main>

08000e56 <LoopForever>:

LoopForever:
    b LoopForever
 8000e56:	e7fe      	b.n	8000e56 <LoopForever>
  ldr   r0, =_estack
 8000e58:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e64:	08004718 	.word	0x08004718
  ldr r2, =_sbss
 8000e68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e6c:	20000178 	.word	0x20000178

08000e70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC1_2_IRQHandler>

08000e72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f001 f95b 	bl	8002138 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e82:	2000      	movs	r0, #0
 8000e84:	f000 f80e 	bl	8000ea4 <HAL_InitTick>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d002      	beq.n	8000e94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	71fb      	strb	r3, [r7, #7]
 8000e92:	e001      	b.n	8000e98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e94:	f7ff fe42 	bl	8000b1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e98:	79fb      	ldrb	r3, [r7, #7]

}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HAL_InitTick+0x68>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d022      	beq.n	8000efe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_InitTick+0x6c>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <HAL_InitTick+0x68>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ec4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f001 f958 	bl	8002182 <HAL_SYSTICK_Config>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d10f      	bne.n	8000ef8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b0f      	cmp	r3, #15
 8000edc:	d809      	bhi.n	8000ef2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee6:	f001 f932 	bl	800214e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <HAL_InitTick+0x70>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	e007      	b.n	8000f02 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	73fb      	strb	r3, [r7, #15]
 8000ef6:	e004      	b.n	8000f02 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	e001      	b.n	8000f02 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000000 	.word	0x20000000
 8000f14:	20000004 	.word	0x20000004

08000f18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <HAL_IncTick+0x1c>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <HAL_IncTick+0x20>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4413      	add	r3, r2
 8000f26:	4a03      	ldr	r2, [pc, #12]	; (8000f34 <HAL_IncTick+0x1c>)
 8000f28:	6013      	str	r3, [r2, #0]
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	20000174 	.word	0x20000174
 8000f38:	20000008 	.word	0x20000008

08000f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <HAL_GetTick+0x14>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000174 	.word	0x20000174

08000f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f5c:	f7ff ffee 	bl	8000f3c <HAL_GetTick>
 8000f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f6c:	d004      	beq.n	8000f78 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_Delay+0x40>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	4413      	add	r3, r2
 8000f76:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f78:	bf00      	nop
 8000f7a:	f7ff ffdf 	bl	8000f3c <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d8f7      	bhi.n	8000f7a <HAL_Delay+0x26>
  {
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000008 	.word	0x20000008

08000f98 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	3360      	adds	r3, #96	; 0x60
 8001012:	461a      	mov	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <LL_ADC_SetOffset+0x44>)
 8001022:	4013      	ands	r3, r2
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	430a      	orrs	r2, r1
 800102e:	4313      	orrs	r3, r2
 8001030:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001038:	bf00      	nop
 800103a:	371c      	adds	r7, #28
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	03fff000 	.word	0x03fff000

08001048 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3360      	adds	r3, #96	; 0x60
 8001056:	461a      	mov	r2, r3
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001068:	4618      	mov	r0, r3
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001074:	b480      	push	{r7}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	3360      	adds	r3, #96	; 0x60
 8001084:	461a      	mov	r2, r3
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	431a      	orrs	r2, r3
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800109e:	bf00      	nop
 80010a0:	371c      	adds	r7, #28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b087      	sub	sp, #28
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	60f8      	str	r0, [r7, #12]
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	3360      	adds	r3, #96	; 0x60
 80010ba:	461a      	mov	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	431a      	orrs	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80010d4:	bf00      	nop
 80010d6:	371c      	adds	r7, #28
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	3360      	adds	r3, #96	; 0x60
 80010f0:	461a      	mov	r2, r3
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	431a      	orrs	r2, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800110a:	bf00      	nop
 800110c:	371c      	adds	r7, #28
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	431a      	orrs	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	615a      	str	r2, [r3, #20]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800113c:	b480      	push	{r7}
 800113e:	b087      	sub	sp, #28
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	3330      	adds	r3, #48	; 0x30
 800114c:	461a      	mov	r2, r3
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	f003 030c 	and.w	r3, r3, #12
 8001158:	4413      	add	r3, r2
 800115a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	f003 031f 	and.w	r3, r3, #31
 8001166:	211f      	movs	r1, #31
 8001168:	fa01 f303 	lsl.w	r3, r1, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	401a      	ands	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	0e9b      	lsrs	r3, r3, #26
 8001174:	f003 011f 	and.w	r1, r3, #31
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	f003 031f 	and.w	r3, r3, #31
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	431a      	orrs	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001188:	bf00      	nop
 800118a:	371c      	adds	r7, #28
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001194:	b480      	push	{r7}
 8001196:	b087      	sub	sp, #28
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	3314      	adds	r3, #20
 80011a4:	461a      	mov	r2, r3
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	0e5b      	lsrs	r3, r3, #25
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	4413      	add	r3, r2
 80011b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	0d1b      	lsrs	r3, r3, #20
 80011bc:	f003 031f 	and.w	r3, r3, #31
 80011c0:	2107      	movs	r1, #7
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	401a      	ands	r2, r3
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	0d1b      	lsrs	r3, r3, #20
 80011ce:	f003 031f 	and.w	r3, r3, #31
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	fa01 f303 	lsl.w	r3, r1, r3
 80011d8:	431a      	orrs	r2, r3
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011de:	bf00      	nop
 80011e0:	371c      	adds	r7, #28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a0f      	ldr	r2, [pc, #60]	; (8001238 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d10a      	bne.n	8001216 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800120c:	431a      	orrs	r2, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001214:	e00a      	b.n	800122c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001222:	43db      	mvns	r3, r3
 8001224:	401a      	ands	r2, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	407f0000 	.word	0x407f0000

0800123c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800124c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	6093      	str	r3, [r2, #8]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001270:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001274:	d101      	bne.n	800127a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001298:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800129c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012c4:	d101      	bne.n	80012ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d101      	bne.n	80012f0 <LL_ADC_IsEnabled+0x18>
 80012ec:	2301      	movs	r3, #1
 80012ee:	e000      	b.n	80012f2 <LL_ADC_IsEnabled+0x1a>
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	2b04      	cmp	r3, #4
 8001310:	d101      	bne.n	8001316 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 0308 	and.w	r3, r3, #8
 8001334:	2b08      	cmp	r3, #8
 8001336:	d101      	bne.n	800133c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001338:	2301      	movs	r3, #1
 800133a:	e000      	b.n	800133e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800134c:	b590      	push	{r4, r7, lr}
 800134e:	b089      	sub	sp, #36	; 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001358:	2300      	movs	r3, #0
 800135a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e177      	b.n	8001656 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001370:	2b00      	cmp	r3, #0
 8001372:	d109      	bne.n	8001388 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff f945 	bl	8000604 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff67 	bl	8001260 <LL_ADC_IsDeepPowerDownEnabled>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d004      	beq.n	80013a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff4d 	bl	800123c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff ff82 	bl	80012b0 <LL_ADC_IsInternalRegulatorEnabled>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d115      	bne.n	80013de <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ff66 	bl	8001288 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013bc:	4b9c      	ldr	r3, [pc, #624]	; (8001630 <HAL_ADC_Init+0x2e4>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	099b      	lsrs	r3, r3, #6
 80013c2:	4a9c      	ldr	r2, [pc, #624]	; (8001634 <HAL_ADC_Init+0x2e8>)
 80013c4:	fba2 2303 	umull	r2, r3, r2, r3
 80013c8:	099b      	lsrs	r3, r3, #6
 80013ca:	3301      	adds	r3, #1
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013d0:	e002      	b.n	80013d8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f9      	bne.n	80013d2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff64 	bl	80012b0 <LL_ADC_IsInternalRegulatorEnabled>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10d      	bne.n	800140a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f2:	f043 0210 	orr.w	r2, r3, #16
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fe:	f043 0201 	orr.w	r2, r3, #1
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff75 	bl	80012fe <LL_ADC_REG_IsConversionOngoing>
 8001414:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141a:	f003 0310 	and.w	r3, r3, #16
 800141e:	2b00      	cmp	r3, #0
 8001420:	f040 8110 	bne.w	8001644 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	2b00      	cmp	r3, #0
 8001428:	f040 810c 	bne.w	8001644 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001430:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001434:	f043 0202 	orr.w	r2, r3, #2
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff49 	bl	80012d8 <LL_ADC_IsEnabled>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d111      	bne.n	8001470 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800144c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001450:	f7ff ff42 	bl	80012d8 <LL_ADC_IsEnabled>
 8001454:	4604      	mov	r4, r0
 8001456:	4878      	ldr	r0, [pc, #480]	; (8001638 <HAL_ADC_Init+0x2ec>)
 8001458:	f7ff ff3e 	bl	80012d8 <LL_ADC_IsEnabled>
 800145c:	4603      	mov	r3, r0
 800145e:	4323      	orrs	r3, r4
 8001460:	2b00      	cmp	r3, #0
 8001462:	d105      	bne.n	8001470 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	4619      	mov	r1, r3
 800146a:	4874      	ldr	r0, [pc, #464]	; (800163c <HAL_ADC_Init+0x2f0>)
 800146c:	f7ff fd94 	bl	8000f98 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	7f5b      	ldrb	r3, [r3, #29]
 8001474:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800147a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001480:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001486:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800148e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800149a:	2b01      	cmp	r3, #1
 800149c:	d106      	bne.n	80014ac <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a2:	3b01      	subs	r3, #1
 80014a4:	045b      	lsls	r3, r3, #17
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d009      	beq.n	80014c8 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	4b5c      	ldr	r3, [pc, #368]	; (8001640 <HAL_ADC_Init+0x2f4>)
 80014d0:	4013      	ands	r3, r2
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	69b9      	ldr	r1, [r7, #24]
 80014d8:	430b      	orrs	r3, r1
 80014da:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff ff01 	bl	80012fe <LL_ADC_REG_IsConversionOngoing>
 80014fc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff ff0e 	bl	8001324 <LL_ADC_INJ_IsConversionOngoing>
 8001508:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d16d      	bne.n	80015ec <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d16a      	bne.n	80015ec <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800151a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001522:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001532:	f023 0302 	bic.w	r3, r3, #2
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6812      	ldr	r2, [r2, #0]
 800153a:	69b9      	ldr	r1, [r7, #24]
 800153c:	430b      	orrs	r3, r1
 800153e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d017      	beq.n	8001578 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	691a      	ldr	r2, [r3, #16]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001556:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001560:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001564:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6911      	ldr	r1, [r2, #16]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	430b      	orrs	r3, r1
 8001572:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001576:	e013      	b.n	80015a0 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	691a      	ldr	r2, [r3, #16]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001586:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	6812      	ldr	r2, [r2, #0]
 8001594:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001598:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800159c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d118      	bne.n	80015dc <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80015b4:	f023 0304 	bic.w	r3, r3, #4
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80015c0:	4311      	orrs	r1, r2
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80015c6:	4311      	orrs	r1, r2
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015cc:	430a      	orrs	r2, r1
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f042 0201 	orr.w	r2, r2, #1
 80015d8:	611a      	str	r2, [r3, #16]
 80015da:	e007      	b.n	80015ec <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	691a      	ldr	r2, [r3, #16]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 0201 	bic.w	r2, r2, #1
 80015ea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d10c      	bne.n	800160e <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f023 010f 	bic.w	r1, r3, #15
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	1e5a      	subs	r2, r3, #1
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	631a      	str	r2, [r3, #48]	; 0x30
 800160c:	e007      	b.n	800161e <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 020f 	bic.w	r2, r2, #15
 800161c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001622:	f023 0303 	bic.w	r3, r3, #3
 8001626:	f043 0201 	orr.w	r2, r3, #1
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	65da      	str	r2, [r3, #92]	; 0x5c
 800162e:	e011      	b.n	8001654 <HAL_ADC_Init+0x308>
 8001630:	20000000 	.word	0x20000000
 8001634:	053e2d63 	.word	0x053e2d63
 8001638:	50000100 	.word	0x50000100
 800163c:	50000300 	.word	0x50000300
 8001640:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001648:	f043 0210 	orr.w	r2, r3, #16
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001654:	7ffb      	ldrb	r3, [r7, #31]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3724      	adds	r7, #36	; 0x24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd90      	pop	{r4, r7, pc}
 800165e:	bf00      	nop

08001660 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b0b6      	sub	sp, #216	; 0xd8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800167a:	2b01      	cmp	r3, #1
 800167c:	d101      	bne.n	8001682 <HAL_ADC_ConfigChannel+0x22>
 800167e:	2302      	movs	r3, #2
 8001680:	e3c8      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x7b4>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fe35 	bl	80012fe <LL_ADC_REG_IsConversionOngoing>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	f040 83ad 	bne.w	8001df6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6818      	ldr	r0, [r3, #0]
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	6859      	ldr	r1, [r3, #4]
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	f7ff fd47 	bl	800113c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fe23 	bl	80012fe <LL_ADC_REG_IsConversionOngoing>
 80016b8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fe2f 	bl	8001324 <LL_ADC_INJ_IsConversionOngoing>
 80016c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f040 81d9 	bne.w	8001a86 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f040 81d4 	bne.w	8001a86 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016e6:	d10f      	bne.n	8001708 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6818      	ldr	r0, [r3, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2200      	movs	r2, #0
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff fd4e 	bl	8001194 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fd08 	bl	8001116 <LL_ADC_SetSamplingTimeCommonConfig>
 8001706:	e00e      	b.n	8001726 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	6819      	ldr	r1, [r3, #0]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	461a      	mov	r2, r3
 8001716:	f7ff fd3d 	bl	8001194 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fcf8 	bl	8001116 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	695a      	ldr	r2, [r3, #20]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	08db      	lsrs	r3, r3, #3
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	2b04      	cmp	r3, #4
 8001746:	d022      	beq.n	800178e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6818      	ldr	r0, [r3, #0]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	6919      	ldr	r1, [r3, #16]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001758:	f7ff fc52 	bl	8001000 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6818      	ldr	r0, [r3, #0]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	6919      	ldr	r1, [r3, #16]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	461a      	mov	r2, r3
 800176a:	f7ff fc9e 	bl	80010aa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6818      	ldr	r0, [r3, #0]
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	6919      	ldr	r1, [r3, #16]
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	7f1b      	ldrb	r3, [r3, #28]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d102      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x124>
 800177e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001782:	e000      	b.n	8001786 <HAL_ADC_ConfigChannel+0x126>
 8001784:	2300      	movs	r3, #0
 8001786:	461a      	mov	r2, r3
 8001788:	f7ff fcaa 	bl	80010e0 <LL_ADC_SetOffsetSaturation>
 800178c:	e17b      	b.n	8001a86 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2100      	movs	r1, #0
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fc57 	bl	8001048 <LL_ADC_GetOffsetChannel>
 800179a:	4603      	mov	r3, r0
 800179c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d10a      	bne.n	80017ba <HAL_ADC_ConfigChannel+0x15a>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fc4c 	bl	8001048 <LL_ADC_GetOffsetChannel>
 80017b0:	4603      	mov	r3, r0
 80017b2:	0e9b      	lsrs	r3, r3, #26
 80017b4:	f003 021f 	and.w	r2, r3, #31
 80017b8:	e01e      	b.n	80017f8 <HAL_ADC_ConfigChannel+0x198>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2100      	movs	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fc41 	bl	8001048 <LL_ADC_GetOffsetChannel>
 80017c6:	4603      	mov	r3, r0
 80017c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80017d0:	fa93 f3a3 	rbit	r3, r3
 80017d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80017dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80017e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80017e8:	2320      	movs	r3, #32
 80017ea:	e004      	b.n	80017f6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80017ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017f0:	fab3 f383 	clz	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001800:	2b00      	cmp	r3, #0
 8001802:	d105      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x1b0>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	0e9b      	lsrs	r3, r3, #26
 800180a:	f003 031f 	and.w	r3, r3, #31
 800180e:	e018      	b.n	8001842 <HAL_ADC_ConfigChannel+0x1e2>
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001818:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800181c:	fa93 f3a3 	rbit	r3, r3
 8001820:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001824:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001828:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800182c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001834:	2320      	movs	r3, #32
 8001836:	e004      	b.n	8001842 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001838:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800183c:	fab3 f383 	clz	r3, r3
 8001840:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001842:	429a      	cmp	r2, r3
 8001844:	d106      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fc10 	bl	8001074 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2101      	movs	r1, #1
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fbf4 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001860:	4603      	mov	r3, r0
 8001862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10a      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x220>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2101      	movs	r1, #1
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fbe9 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001876:	4603      	mov	r3, r0
 8001878:	0e9b      	lsrs	r3, r3, #26
 800187a:	f003 021f 	and.w	r2, r3, #31
 800187e:	e01e      	b.n	80018be <HAL_ADC_ConfigChannel+0x25e>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2101      	movs	r1, #1
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fbde 	bl	8001048 <LL_ADC_GetOffsetChannel>
 800188c:	4603      	mov	r3, r0
 800188e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001892:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001896:	fa93 f3a3 	rbit	r3, r3
 800189a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800189e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80018a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80018a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80018ae:	2320      	movs	r3, #32
 80018b0:	e004      	b.n	80018bc <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80018b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018b6:	fab3 f383 	clz	r3, r3
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d105      	bne.n	80018d6 <HAL_ADC_ConfigChannel+0x276>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	0e9b      	lsrs	r3, r3, #26
 80018d0:	f003 031f 	and.w	r3, r3, #31
 80018d4:	e018      	b.n	8001908 <HAL_ADC_ConfigChannel+0x2a8>
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018e2:	fa93 f3a3 	rbit	r3, r3
 80018e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80018ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80018ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80018f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80018fa:	2320      	movs	r3, #32
 80018fc:	e004      	b.n	8001908 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80018fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001902:	fab3 f383 	clz	r3, r3
 8001906:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001908:	429a      	cmp	r2, r3
 800190a:	d106      	bne.n	800191a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2200      	movs	r2, #0
 8001912:	2101      	movs	r1, #1
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fbad 	bl	8001074 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2102      	movs	r1, #2
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fb91 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001926:	4603      	mov	r3, r0
 8001928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10a      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x2e6>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2102      	movs	r1, #2
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fb86 	bl	8001048 <LL_ADC_GetOffsetChannel>
 800193c:	4603      	mov	r3, r0
 800193e:	0e9b      	lsrs	r3, r3, #26
 8001940:	f003 021f 	and.w	r2, r3, #31
 8001944:	e01e      	b.n	8001984 <HAL_ADC_ConfigChannel+0x324>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2102      	movs	r1, #2
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fb7b 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001952:	4603      	mov	r3, r0
 8001954:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001958:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800195c:	fa93 f3a3 	rbit	r3, r3
 8001960:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001964:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001968:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800196c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001974:	2320      	movs	r3, #32
 8001976:	e004      	b.n	8001982 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001978:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800197c:	fab3 f383 	clz	r3, r3
 8001980:	b2db      	uxtb	r3, r3
 8001982:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800198c:	2b00      	cmp	r3, #0
 800198e:	d105      	bne.n	800199c <HAL_ADC_ConfigChannel+0x33c>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	0e9b      	lsrs	r3, r3, #26
 8001996:	f003 031f 	and.w	r3, r3, #31
 800199a:	e016      	b.n	80019ca <HAL_ADC_ConfigChannel+0x36a>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019a8:	fa93 f3a3 	rbit	r3, r3
 80019ac:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80019ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80019b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80019b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80019bc:	2320      	movs	r3, #32
 80019be:	e004      	b.n	80019ca <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80019c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019c4:	fab3 f383 	clz	r3, r3
 80019c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d106      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2200      	movs	r2, #0
 80019d4:	2102      	movs	r1, #2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fb4c 	bl	8001074 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2103      	movs	r1, #3
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fb30 	bl	8001048 <LL_ADC_GetOffsetChannel>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10a      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x3a8>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2103      	movs	r1, #3
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fb25 	bl	8001048 <LL_ADC_GetOffsetChannel>
 80019fe:	4603      	mov	r3, r0
 8001a00:	0e9b      	lsrs	r3, r3, #26
 8001a02:	f003 021f 	and.w	r2, r3, #31
 8001a06:	e017      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x3d8>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2103      	movs	r1, #3
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fb1a 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001a14:	4603      	mov	r3, r0
 8001a16:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a1a:	fa93 f3a3 	rbit	r3, r3
 8001a1e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001a20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a22:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001a24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001a2a:	2320      	movs	r3, #32
 8001a2c:	e003      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001a2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a30:	fab3 f383 	clz	r3, r3
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d105      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x3f0>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	0e9b      	lsrs	r3, r3, #26
 8001a4a:	f003 031f 	and.w	r3, r3, #31
 8001a4e:	e011      	b.n	8001a74 <HAL_ADC_ConfigChannel+0x414>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a58:	fa93 f3a3 	rbit	r3, r3
 8001a5c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001a5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a60:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001a68:	2320      	movs	r3, #32
 8001a6a:	e003      	b.n	8001a74 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a6e:	fab3 f383 	clz	r3, r3
 8001a72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d106      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2103      	movs	r1, #3
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff faf7 	bl	8001074 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fc24 	bl	80012d8 <LL_ADC_IsEnabled>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f040 8140 	bne.w	8001d18 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	6819      	ldr	r1, [r3, #0]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	f7ff fba1 	bl	80011ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	4a8f      	ldr	r2, [pc, #572]	; (8001cec <HAL_ADC_ConfigChannel+0x68c>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	f040 8131 	bne.w	8001d18 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10b      	bne.n	8001ade <HAL_ADC_ConfigChannel+0x47e>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	0e9b      	lsrs	r3, r3, #26
 8001acc:	3301      	adds	r3, #1
 8001ace:	f003 031f 	and.w	r3, r3, #31
 8001ad2:	2b09      	cmp	r3, #9
 8001ad4:	bf94      	ite	ls
 8001ad6:	2301      	movls	r3, #1
 8001ad8:	2300      	movhi	r3, #0
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	e019      	b.n	8001b12 <HAL_ADC_ConfigChannel+0x4b2>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ae6:	fa93 f3a3 	rbit	r3, r3
 8001aea:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001aec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001aee:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001af0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001af6:	2320      	movs	r3, #32
 8001af8:	e003      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001afa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001afc:	fab3 f383 	clz	r3, r3
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	3301      	adds	r3, #1
 8001b04:	f003 031f 	and.w	r3, r3, #31
 8001b08:	2b09      	cmp	r3, #9
 8001b0a:	bf94      	ite	ls
 8001b0c:	2301      	movls	r3, #1
 8001b0e:	2300      	movhi	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d079      	beq.n	8001c0a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d107      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x4d2>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	0e9b      	lsrs	r3, r3, #26
 8001b28:	3301      	adds	r3, #1
 8001b2a:	069b      	lsls	r3, r3, #26
 8001b2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b30:	e015      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x4fe>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b3a:	fa93 f3a3 	rbit	r3, r3
 8001b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b42:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001b4a:	2320      	movs	r3, #32
 8001b4c:	e003      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b50:	fab3 f383 	clz	r3, r3
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	3301      	adds	r3, #1
 8001b58:	069b      	lsls	r3, r3, #26
 8001b5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d109      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x51e>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	0e9b      	lsrs	r3, r3, #26
 8001b70:	3301      	adds	r3, #1
 8001b72:	f003 031f 	and.w	r3, r3, #31
 8001b76:	2101      	movs	r1, #1
 8001b78:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7c:	e017      	b.n	8001bae <HAL_ADC_ConfigChannel+0x54e>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b86:	fa93 f3a3 	rbit	r3, r3
 8001b8a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b8e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001b96:	2320      	movs	r3, #32
 8001b98:	e003      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b9c:	fab3 f383 	clz	r3, r3
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	f003 031f 	and.w	r3, r3, #31
 8001ba8:	2101      	movs	r1, #1
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	ea42 0103 	orr.w	r1, r2, r3
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10a      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x574>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	0e9b      	lsrs	r3, r3, #26
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	f003 021f 	and.w	r2, r3, #31
 8001bca:	4613      	mov	r3, r2
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	4413      	add	r3, r2
 8001bd0:	051b      	lsls	r3, r3, #20
 8001bd2:	e018      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x5a6>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bdc:	fa93 f3a3 	rbit	r3, r3
 8001be0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001bec:	2320      	movs	r3, #32
 8001bee:	e003      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bf2:	fab3 f383 	clz	r3, r3
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	f003 021f 	and.w	r2, r3, #31
 8001bfe:	4613      	mov	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c06:	430b      	orrs	r3, r1
 8001c08:	e081      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d107      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0x5c6>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	0e9b      	lsrs	r3, r3, #26
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	069b      	lsls	r3, r3, #26
 8001c20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c24:	e015      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x5f2>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2e:	fa93 f3a3 	rbit	r3, r3
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c36:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001c3e:	2320      	movs	r3, #32
 8001c40:	e003      	b.n	8001c4a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c44:	fab3 f383 	clz	r3, r3
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	069b      	lsls	r3, r3, #26
 8001c4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x612>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	0e9b      	lsrs	r3, r3, #26
 8001c64:	3301      	adds	r3, #1
 8001c66:	f003 031f 	and.w	r3, r3, #31
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c70:	e017      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x642>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	fa93 f3a3 	rbit	r3, r3
 8001c7e:	61fb      	str	r3, [r7, #28]
  return result;
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001c8a:	2320      	movs	r3, #32
 8001c8c:	e003      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	fab3 f383 	clz	r3, r3
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	3301      	adds	r3, #1
 8001c98:	f003 031f 	and.w	r3, r3, #31
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca2:	ea42 0103 	orr.w	r1, r2, r3
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10d      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x66e>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	0e9b      	lsrs	r3, r3, #26
 8001cb8:	3301      	adds	r3, #1
 8001cba:	f003 021f 	and.w	r2, r3, #31
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3b1e      	subs	r3, #30
 8001cc6:	051b      	lsls	r3, r3, #20
 8001cc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ccc:	e01e      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x6ac>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa93 f3a3 	rbit	r3, r3
 8001cda:	613b      	str	r3, [r7, #16]
  return result;
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d104      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001ce6:	2320      	movs	r3, #32
 8001ce8:	e006      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x698>
 8001cea:	bf00      	nop
 8001cec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	f003 021f 	and.w	r2, r3, #31
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	3b1e      	subs	r3, #30
 8001d06:	051b      	lsls	r3, r3, #20
 8001d08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d0c:	430b      	orrs	r3, r1
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	6892      	ldr	r2, [r2, #8]
 8001d12:	4619      	mov	r1, r3
 8001d14:	f7ff fa3e 	bl	8001194 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4b3f      	ldr	r3, [pc, #252]	; (8001e1c <HAL_ADC_ConfigChannel+0x7bc>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d071      	beq.n	8001e08 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d24:	483e      	ldr	r0, [pc, #248]	; (8001e20 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d26:	f7ff f95d 	bl	8000fe4 <LL_ADC_GetCommonPathInternalCh>
 8001d2a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a3c      	ldr	r2, [pc, #240]	; (8001e24 <HAL_ADC_ConfigChannel+0x7c4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d004      	beq.n	8001d42 <HAL_ADC_ConfigChannel+0x6e2>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a3a      	ldr	r2, [pc, #232]	; (8001e28 <HAL_ADC_ConfigChannel+0x7c8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d127      	bne.n	8001d92 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d121      	bne.n	8001d92 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d56:	d157      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d60:	4619      	mov	r1, r3
 8001d62:	482f      	ldr	r0, [pc, #188]	; (8001e20 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d64:	f7ff f92b 	bl	8000fbe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d68:	4b30      	ldr	r3, [pc, #192]	; (8001e2c <HAL_ADC_ConfigChannel+0x7cc>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	099b      	lsrs	r3, r3, #6
 8001d6e:	4a30      	ldr	r2, [pc, #192]	; (8001e30 <HAL_ADC_ConfigChannel+0x7d0>)
 8001d70:	fba2 2303 	umull	r2, r3, r2, r3
 8001d74:	099b      	lsrs	r3, r3, #6
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	4613      	mov	r3, r2
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	4413      	add	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d82:	e002      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f9      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d90:	e03a      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a27      	ldr	r2, [pc, #156]	; (8001e34 <HAL_ADC_ConfigChannel+0x7d4>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d113      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x764>
 8001d9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001da0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10d      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a22      	ldr	r2, [pc, #136]	; (8001e38 <HAL_ADC_ConfigChannel+0x7d8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d02a      	beq.n	8001e08 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001db2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4818      	ldr	r0, [pc, #96]	; (8001e20 <HAL_ADC_ConfigChannel+0x7c0>)
 8001dbe:	f7ff f8fe 	bl	8000fbe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dc2:	e021      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a1c      	ldr	r2, [pc, #112]	; (8001e3c <HAL_ADC_ConfigChannel+0x7dc>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d11c      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001dce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d116      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a16      	ldr	r2, [pc, #88]	; (8001e38 <HAL_ADC_ConfigChannel+0x7d8>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d011      	beq.n	8001e08 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001de4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001de8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dec:	4619      	mov	r1, r3
 8001dee:	480c      	ldr	r0, [pc, #48]	; (8001e20 <HAL_ADC_ConfigChannel+0x7c0>)
 8001df0:	f7ff f8e5 	bl	8000fbe <LL_ADC_SetCommonPathInternalCh>
 8001df4:	e008      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfa:	f043 0220 	orr.w	r2, r3, #32
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001e10:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	37d8      	adds	r7, #216	; 0xd8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	80080000 	.word	0x80080000
 8001e20:	50000300 	.word	0x50000300
 8001e24:	c3210000 	.word	0xc3210000
 8001e28:	90c00010 	.word	0x90c00010
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	053e2d63 	.word	0x053e2d63
 8001e34:	c7520000 	.word	0xc7520000
 8001e38:	50000100 	.word	0x50000100
 8001e3c:	cb840000 	.word	0xcb840000

08001e40 <LL_ADC_IsEnabled>:
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <LL_ADC_IsEnabled+0x18>
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <LL_ADC_IsEnabled+0x1a>
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <LL_ADC_REG_IsConversionOngoing>:
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d101      	bne.n	8001e7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001e8c:	b590      	push	{r4, r7, lr}
 8001e8e:	b0a1      	sub	sp, #132	; 0x84
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e08b      	b.n	8001fc2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ec2:	d102      	bne.n	8001eca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001ec4:	4b41      	ldr	r3, [pc, #260]	; (8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	e001      	b.n	8001ece <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10b      	bne.n	8001eec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed8:	f043 0220 	orr.w	r2, r3, #32
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e06a      	b.n	8001fc2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff ffb9 	bl	8001e66 <LL_ADC_REG_IsConversionOngoing>
 8001ef4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff ffb3 	bl	8001e66 <LL_ADC_REG_IsConversionOngoing>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d14c      	bne.n	8001fa0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001f06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d149      	bne.n	8001fa0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001f0c:	4b30      	ldr	r3, [pc, #192]	; (8001fd0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8001f0e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d028      	beq.n	8001f6a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	6859      	ldr	r1, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f2a:	035b      	lsls	r3, r3, #13
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f32:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f34:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f38:	f7ff ff82 	bl	8001e40 <LL_ADC_IsEnabled>
 8001f3c:	4604      	mov	r4, r0
 8001f3e:	4823      	ldr	r0, [pc, #140]	; (8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001f40:	f7ff ff7e 	bl	8001e40 <LL_ADC_IsEnabled>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4323      	orrs	r3, r4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d133      	bne.n	8001fb4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f54:	f023 030f 	bic.w	r3, r3, #15
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	6811      	ldr	r1, [r2, #0]
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	6892      	ldr	r2, [r2, #8]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	431a      	orrs	r2, r3
 8001f64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f66:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f68:	e024      	b.n	8001fb4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f74:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f76:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f7a:	f7ff ff61 	bl	8001e40 <LL_ADC_IsEnabled>
 8001f7e:	4604      	mov	r4, r0
 8001f80:	4812      	ldr	r0, [pc, #72]	; (8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001f82:	f7ff ff5d 	bl	8001e40 <LL_ADC_IsEnabled>
 8001f86:	4603      	mov	r3, r0
 8001f88:	4323      	orrs	r3, r4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d112      	bne.n	8001fb4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f96:	f023 030f 	bic.w	r3, r3, #15
 8001f9a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001f9c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f9e:	e009      	b.n	8001fb4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa4:	f043 0220 	orr.w	r2, r3, #32
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001fb2:	e000      	b.n	8001fb6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fb4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001fbe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3784      	adds	r7, #132	; 0x84
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd90      	pop	{r4, r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	50000100 	.word	0x50000100
 8001fd0:	50000300 	.word	0x50000300

08001fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002006:	4a04      	ldr	r2, [pc, #16]	; (8002018 <__NVIC_SetPriorityGrouping+0x44>)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	60d3      	str	r3, [r2, #12]
}
 800200c:	bf00      	nop
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <__NVIC_GetPriorityGrouping+0x18>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	0a1b      	lsrs	r3, r3, #8
 8002026:	f003 0307 	and.w	r3, r3, #7
}
 800202a:	4618      	mov	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	6039      	str	r1, [r7, #0]
 8002042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002048:	2b00      	cmp	r3, #0
 800204a:	db0a      	blt.n	8002062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	b2da      	uxtb	r2, r3
 8002050:	490c      	ldr	r1, [pc, #48]	; (8002084 <__NVIC_SetPriority+0x4c>)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	0112      	lsls	r2, r2, #4
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	440b      	add	r3, r1
 800205c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002060:	e00a      	b.n	8002078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4908      	ldr	r1, [pc, #32]	; (8002088 <__NVIC_SetPriority+0x50>)
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	3b04      	subs	r3, #4
 8002070:	0112      	lsls	r2, r2, #4
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	440b      	add	r3, r1
 8002076:	761a      	strb	r2, [r3, #24]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000e100 	.word	0xe000e100
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	; 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f1c3 0307 	rsb	r3, r3, #7
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	bf28      	it	cs
 80020aa:	2304      	movcs	r3, #4
 80020ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3304      	adds	r3, #4
 80020b2:	2b06      	cmp	r3, #6
 80020b4:	d902      	bls.n	80020bc <NVIC_EncodePriority+0x30>
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3b03      	subs	r3, #3
 80020ba:	e000      	b.n	80020be <NVIC_EncodePriority+0x32>
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c0:	f04f 32ff 	mov.w	r2, #4294967295
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43da      	mvns	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	401a      	ands	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d4:	f04f 31ff 	mov.w	r1, #4294967295
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	fa01 f303 	lsl.w	r3, r1, r3
 80020de:	43d9      	mvns	r1, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e4:	4313      	orrs	r3, r2
         );
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3724      	adds	r7, #36	; 0x24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002104:	d301      	bcc.n	800210a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002106:	2301      	movs	r3, #1
 8002108:	e00f      	b.n	800212a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210a:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <SysTick_Config+0x40>)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3b01      	subs	r3, #1
 8002110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002112:	210f      	movs	r1, #15
 8002114:	f04f 30ff 	mov.w	r0, #4294967295
 8002118:	f7ff ff8e 	bl	8002038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <SysTick_Config+0x40>)
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002122:	4b04      	ldr	r3, [pc, #16]	; (8002134 <SysTick_Config+0x40>)
 8002124:	2207      	movs	r2, #7
 8002126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	e000e010 	.word	0xe000e010

08002138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff ff47 	bl	8001fd4 <__NVIC_SetPriorityGrouping>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	4603      	mov	r3, r0
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800215c:	f7ff ff5e 	bl	800201c <__NVIC_GetPriorityGrouping>
 8002160:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68b9      	ldr	r1, [r7, #8]
 8002166:	6978      	ldr	r0, [r7, #20]
 8002168:	f7ff ff90 	bl	800208c <NVIC_EncodePriority>
 800216c:	4602      	mov	r2, r0
 800216e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff5f 	bl	8002038 <__NVIC_SetPriority>
}
 800217a:	bf00      	nop
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff ffb2 	bl	80020f4 <SysTick_Config>
 8002190:	4603      	mov	r3, r0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800219c:	b480      	push	{r7}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80021aa:	e15a      	b.n	8002462 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	2101      	movs	r1, #1
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	fa01 f303 	lsl.w	r3, r1, r3
 80021b8:	4013      	ands	r3, r2
 80021ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 814c 	beq.w	800245c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d005      	beq.n	80021dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d130      	bne.n	800223e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	2203      	movs	r2, #3
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002212:	2201      	movs	r2, #1
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	4013      	ands	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	091b      	lsrs	r3, r3, #4
 8002228:	f003 0201 	and.w	r2, r3, #1
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	2b03      	cmp	r3, #3
 8002248:	d017      	beq.n	800227a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	2203      	movs	r2, #3
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	4013      	ands	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d123      	bne.n	80022ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	08da      	lsrs	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3208      	adds	r2, #8
 800228e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002292:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	220f      	movs	r2, #15
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4013      	ands	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	691a      	ldr	r2, [r3, #16]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	08da      	lsrs	r2, r3, #3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3208      	adds	r2, #8
 80022c8:	6939      	ldr	r1, [r7, #16]
 80022ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	2203      	movs	r2, #3
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	4013      	ands	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 0203 	and.w	r2, r3, #3
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 80a6 	beq.w	800245c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002310:	4b5b      	ldr	r3, [pc, #364]	; (8002480 <HAL_GPIO_Init+0x2e4>)
 8002312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002314:	4a5a      	ldr	r2, [pc, #360]	; (8002480 <HAL_GPIO_Init+0x2e4>)
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	6613      	str	r3, [r2, #96]	; 0x60
 800231c:	4b58      	ldr	r3, [pc, #352]	; (8002480 <HAL_GPIO_Init+0x2e4>)
 800231e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002328:	4a56      	ldr	r2, [pc, #344]	; (8002484 <HAL_GPIO_Init+0x2e8>)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	089b      	lsrs	r3, r3, #2
 800232e:	3302      	adds	r3, #2
 8002330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002334:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	220f      	movs	r2, #15
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4013      	ands	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002352:	d01f      	beq.n	8002394 <HAL_GPIO_Init+0x1f8>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a4c      	ldr	r2, [pc, #304]	; (8002488 <HAL_GPIO_Init+0x2ec>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d019      	beq.n	8002390 <HAL_GPIO_Init+0x1f4>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a4b      	ldr	r2, [pc, #300]	; (800248c <HAL_GPIO_Init+0x2f0>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d013      	beq.n	800238c <HAL_GPIO_Init+0x1f0>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a4a      	ldr	r2, [pc, #296]	; (8002490 <HAL_GPIO_Init+0x2f4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d00d      	beq.n	8002388 <HAL_GPIO_Init+0x1ec>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a49      	ldr	r2, [pc, #292]	; (8002494 <HAL_GPIO_Init+0x2f8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d007      	beq.n	8002384 <HAL_GPIO_Init+0x1e8>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a48      	ldr	r2, [pc, #288]	; (8002498 <HAL_GPIO_Init+0x2fc>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d101      	bne.n	8002380 <HAL_GPIO_Init+0x1e4>
 800237c:	2305      	movs	r3, #5
 800237e:	e00a      	b.n	8002396 <HAL_GPIO_Init+0x1fa>
 8002380:	2306      	movs	r3, #6
 8002382:	e008      	b.n	8002396 <HAL_GPIO_Init+0x1fa>
 8002384:	2304      	movs	r3, #4
 8002386:	e006      	b.n	8002396 <HAL_GPIO_Init+0x1fa>
 8002388:	2303      	movs	r3, #3
 800238a:	e004      	b.n	8002396 <HAL_GPIO_Init+0x1fa>
 800238c:	2302      	movs	r3, #2
 800238e:	e002      	b.n	8002396 <HAL_GPIO_Init+0x1fa>
 8002390:	2301      	movs	r3, #1
 8002392:	e000      	b.n	8002396 <HAL_GPIO_Init+0x1fa>
 8002394:	2300      	movs	r3, #0
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	f002 0203 	and.w	r2, r2, #3
 800239c:	0092      	lsls	r2, r2, #2
 800239e:	4093      	lsls	r3, r2
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023a6:	4937      	ldr	r1, [pc, #220]	; (8002484 <HAL_GPIO_Init+0x2e8>)
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	089b      	lsrs	r3, r3, #2
 80023ac:	3302      	adds	r3, #2
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023b4:	4b39      	ldr	r3, [pc, #228]	; (800249c <HAL_GPIO_Init+0x300>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	43db      	mvns	r3, r3
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4013      	ands	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023d8:	4a30      	ldr	r2, [pc, #192]	; (800249c <HAL_GPIO_Init+0x300>)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023de:	4b2f      	ldr	r3, [pc, #188]	; (800249c <HAL_GPIO_Init+0x300>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	43db      	mvns	r3, r3
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002402:	4a26      	ldr	r2, [pc, #152]	; (800249c <HAL_GPIO_Init+0x300>)
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002408:	4b24      	ldr	r3, [pc, #144]	; (800249c <HAL_GPIO_Init+0x300>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	43db      	mvns	r3, r3
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800242c:	4a1b      	ldr	r2, [pc, #108]	; (800249c <HAL_GPIO_Init+0x300>)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002432:	4b1a      	ldr	r3, [pc, #104]	; (800249c <HAL_GPIO_Init+0x300>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	43db      	mvns	r3, r3
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4013      	ands	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002456:	4a11      	ldr	r2, [pc, #68]	; (800249c <HAL_GPIO_Init+0x300>)
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	3301      	adds	r3, #1
 8002460:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	fa22 f303 	lsr.w	r3, r2, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	f47f ae9d 	bne.w	80021ac <HAL_GPIO_Init+0x10>
  }
}
 8002472:	bf00      	nop
 8002474:	bf00      	nop
 8002476:	371c      	adds	r7, #28
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	40021000 	.word	0x40021000
 8002484:	40010000 	.word	0x40010000
 8002488:	48000400 	.word	0x48000400
 800248c:	48000800 	.word	0x48000800
 8002490:	48000c00 	.word	0x48000c00
 8002494:	48001000 	.word	0x48001000
 8002498:	48001400 	.word	0x48001400
 800249c:	40010400 	.word	0x40010400

080024a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	887b      	ldrh	r3, [r7, #2]
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024b8:	2301      	movs	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
 80024bc:	e001      	b.n	80024c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024be:	2300      	movs	r3, #0
 80024c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	807b      	strh	r3, [r7, #2]
 80024dc:	4613      	mov	r3, r2
 80024de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024e0:	787b      	ldrb	r3, [r7, #1]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024e6:	887a      	ldrh	r2, [r7, #2]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024ec:	e002      	b.n	80024f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024ee:	887a      	ldrh	r2, [r7, #2]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d141      	bne.n	8002592 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800250e:	4b4b      	ldr	r3, [pc, #300]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800251a:	d131      	bne.n	8002580 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800251c:	4b47      	ldr	r3, [pc, #284]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800251e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002522:	4a46      	ldr	r2, [pc, #280]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002528:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800252c:	4b43      	ldr	r3, [pc, #268]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002534:	4a41      	ldr	r2, [pc, #260]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002536:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800253a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800253c:	4b40      	ldr	r3, [pc, #256]	; (8002640 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2232      	movs	r2, #50	; 0x32
 8002542:	fb02 f303 	mul.w	r3, r2, r3
 8002546:	4a3f      	ldr	r2, [pc, #252]	; (8002644 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002548:	fba2 2303 	umull	r2, r3, r2, r3
 800254c:	0c9b      	lsrs	r3, r3, #18
 800254e:	3301      	adds	r3, #1
 8002550:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002552:	e002      	b.n	800255a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	3b01      	subs	r3, #1
 8002558:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800255a:	4b38      	ldr	r3, [pc, #224]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002566:	d102      	bne.n	800256e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f2      	bne.n	8002554 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800256e:	4b33      	ldr	r3, [pc, #204]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800257a:	d158      	bne.n	800262e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e057      	b.n	8002630 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002580:	4b2e      	ldr	r3, [pc, #184]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002586:	4a2d      	ldr	r2, [pc, #180]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800258c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002590:	e04d      	b.n	800262e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002598:	d141      	bne.n	800261e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800259a:	4b28      	ldr	r3, [pc, #160]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a6:	d131      	bne.n	800260c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025a8:	4b24      	ldr	r3, [pc, #144]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025ae:	4a23      	ldr	r2, [pc, #140]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025b8:	4b20      	ldr	r3, [pc, #128]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025c0:	4a1e      	ldr	r2, [pc, #120]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025c8:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2232      	movs	r2, #50	; 0x32
 80025ce:	fb02 f303 	mul.w	r3, r2, r3
 80025d2:	4a1c      	ldr	r2, [pc, #112]	; (8002644 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025d4:	fba2 2303 	umull	r2, r3, r2, r3
 80025d8:	0c9b      	lsrs	r3, r3, #18
 80025da:	3301      	adds	r3, #1
 80025dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025de:	e002      	b.n	80025e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025f2:	d102      	bne.n	80025fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f2      	bne.n	80025e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002606:	d112      	bne.n	800262e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e011      	b.n	8002630 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800260e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002612:	4a0a      	ldr	r2, [pc, #40]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002618:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800261c:	e007      	b.n	800262e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800261e:	4b07      	ldr	r3, [pc, #28]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002626:	4a05      	ldr	r2, [pc, #20]	; (800263c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002628:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800262c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	40007000 	.word	0x40007000
 8002640:	20000000 	.word	0x20000000
 8002644:	431bde83 	.word	0x431bde83

08002648 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800264c:	4b05      	ldr	r3, [pc, #20]	; (8002664 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	4a04      	ldr	r2, [pc, #16]	; (8002664 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002656:	6093      	str	r3, [r2, #8]
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40007000 	.word	0x40007000

08002668 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e306      	b.n	8002c88 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d075      	beq.n	8002772 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002686:	4b97      	ldr	r3, [pc, #604]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
 800268e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002690:	4b94      	ldr	r3, [pc, #592]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	2b0c      	cmp	r3, #12
 800269e:	d102      	bne.n	80026a6 <HAL_RCC_OscConfig+0x3e>
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d002      	beq.n	80026ac <HAL_RCC_OscConfig+0x44>
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d10b      	bne.n	80026c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ac:	4b8d      	ldr	r3, [pc, #564]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d05b      	beq.n	8002770 <HAL_RCC_OscConfig+0x108>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d157      	bne.n	8002770 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e2e1      	b.n	8002c88 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026cc:	d106      	bne.n	80026dc <HAL_RCC_OscConfig+0x74>
 80026ce:	4b85      	ldr	r3, [pc, #532]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a84      	ldr	r2, [pc, #528]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80026d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	e01d      	b.n	8002718 <HAL_RCC_OscConfig+0xb0>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026e4:	d10c      	bne.n	8002700 <HAL_RCC_OscConfig+0x98>
 80026e6:	4b7f      	ldr	r3, [pc, #508]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a7e      	ldr	r2, [pc, #504]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80026ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	4b7c      	ldr	r3, [pc, #496]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a7b      	ldr	r2, [pc, #492]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80026f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	e00b      	b.n	8002718 <HAL_RCC_OscConfig+0xb0>
 8002700:	4b78      	ldr	r3, [pc, #480]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a77      	ldr	r2, [pc, #476]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 8002706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	4b75      	ldr	r3, [pc, #468]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a74      	ldr	r2, [pc, #464]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 8002712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002716:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d013      	beq.n	8002748 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002720:	f7fe fc0c 	bl	8000f3c <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002728:	f7fe fc08 	bl	8000f3c <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b64      	cmp	r3, #100	; 0x64
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e2a6      	b.n	8002c88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800273a:	4b6a      	ldr	r3, [pc, #424]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0xc0>
 8002746:	e014      	b.n	8002772 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7fe fbf8 	bl	8000f3c <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002750:	f7fe fbf4 	bl	8000f3c <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b64      	cmp	r3, #100	; 0x64
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e292      	b.n	8002c88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002762:	4b60      	ldr	r3, [pc, #384]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0xe8>
 800276e:	e000      	b.n	8002772 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d075      	beq.n	800286a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800277e:	4b59      	ldr	r3, [pc, #356]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002788:	4b56      	ldr	r3, [pc, #344]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	2b0c      	cmp	r3, #12
 8002796:	d102      	bne.n	800279e <HAL_RCC_OscConfig+0x136>
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d002      	beq.n	80027a4 <HAL_RCC_OscConfig+0x13c>
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d11f      	bne.n	80027e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027a4:	4b4f      	ldr	r3, [pc, #316]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_RCC_OscConfig+0x154>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e265      	b.n	8002c88 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027bc:	4b49      	ldr	r3, [pc, #292]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	061b      	lsls	r3, r3, #24
 80027ca:	4946      	ldr	r1, [pc, #280]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027d0:	4b45      	ldr	r3, [pc, #276]	; (80028e8 <HAL_RCC_OscConfig+0x280>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fe fb65 	bl	8000ea4 <HAL_InitTick>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d043      	beq.n	8002868 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e251      	b.n	8002c88 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d023      	beq.n	8002834 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ec:	4b3d      	ldr	r3, [pc, #244]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a3c      	ldr	r2, [pc, #240]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80027f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7fe fba0 	bl	8000f3c <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002800:	f7fe fb9c 	bl	8000f3c <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e23a      	b.n	8002c88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002812:	4b34      	ldr	r3, [pc, #208]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281e:	4b31      	ldr	r3, [pc, #196]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	061b      	lsls	r3, r3, #24
 800282c:	492d      	ldr	r1, [pc, #180]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 800282e:	4313      	orrs	r3, r2
 8002830:	604b      	str	r3, [r1, #4]
 8002832:	e01a      	b.n	800286a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002834:	4b2b      	ldr	r3, [pc, #172]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a2a      	ldr	r2, [pc, #168]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 800283a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800283e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002840:	f7fe fb7c 	bl	8000f3c <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002848:	f7fe fb78 	bl	8000f3c <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e216      	b.n	8002c88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800285a:	4b22      	ldr	r3, [pc, #136]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0x1e0>
 8002866:	e000      	b.n	800286a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002868:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d041      	beq.n	80028fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d01c      	beq.n	80028b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800287e:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 8002880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002884:	4a17      	ldr	r2, [pc, #92]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288e:	f7fe fb55 	bl	8000f3c <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002896:	f7fe fb51 	bl	8000f3c <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e1ef      	b.n	8002c88 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028a8:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80028aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0ef      	beq.n	8002896 <HAL_RCC_OscConfig+0x22e>
 80028b6:	e020      	b.n	80028fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028b8:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80028ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028be:	4a09      	ldr	r2, [pc, #36]	; (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80028c0:	f023 0301 	bic.w	r3, r3, #1
 80028c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c8:	f7fe fb38 	bl	8000f3c <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028ce:	e00d      	b.n	80028ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d0:	f7fe fb34 	bl	8000f3c <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d906      	bls.n	80028ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e1d2      	b.n	8002c88 <HAL_RCC_OscConfig+0x620>
 80028e2:	bf00      	nop
 80028e4:	40021000 	.word	0x40021000
 80028e8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028ec:	4b8c      	ldr	r3, [pc, #560]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 80028ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1ea      	bne.n	80028d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0304 	and.w	r3, r3, #4
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 80a6 	beq.w	8002a54 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002908:	2300      	movs	r3, #0
 800290a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800290c:	4b84      	ldr	r3, [pc, #528]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 800290e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_RCC_OscConfig+0x2b4>
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <HAL_RCC_OscConfig+0x2b6>
 800291c:	2300      	movs	r3, #0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00d      	beq.n	800293e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002922:	4b7f      	ldr	r3, [pc, #508]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002926:	4a7e      	ldr	r2, [pc, #504]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292c:	6593      	str	r3, [r2, #88]	; 0x58
 800292e:	4b7c      	ldr	r3, [pc, #496]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800293a:	2301      	movs	r3, #1
 800293c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800293e:	4b79      	ldr	r3, [pc, #484]	; (8002b24 <HAL_RCC_OscConfig+0x4bc>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d118      	bne.n	800297c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800294a:	4b76      	ldr	r3, [pc, #472]	; (8002b24 <HAL_RCC_OscConfig+0x4bc>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a75      	ldr	r2, [pc, #468]	; (8002b24 <HAL_RCC_OscConfig+0x4bc>)
 8002950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002956:	f7fe faf1 	bl	8000f3c <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295e:	f7fe faed 	bl	8000f3c <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e18b      	b.n	8002c88 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002970:	4b6c      	ldr	r3, [pc, #432]	; (8002b24 <HAL_RCC_OscConfig+0x4bc>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0f0      	beq.n	800295e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d108      	bne.n	8002996 <HAL_RCC_OscConfig+0x32e>
 8002984:	4b66      	ldr	r3, [pc, #408]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298a:	4a65      	ldr	r2, [pc, #404]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002994:	e024      	b.n	80029e0 <HAL_RCC_OscConfig+0x378>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b05      	cmp	r3, #5
 800299c:	d110      	bne.n	80029c0 <HAL_RCC_OscConfig+0x358>
 800299e:	4b60      	ldr	r3, [pc, #384]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 80029a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a4:	4a5e      	ldr	r2, [pc, #376]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 80029a6:	f043 0304 	orr.w	r3, r3, #4
 80029aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029ae:	4b5c      	ldr	r3, [pc, #368]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 80029b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b4:	4a5a      	ldr	r2, [pc, #360]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029be:	e00f      	b.n	80029e0 <HAL_RCC_OscConfig+0x378>
 80029c0:	4b57      	ldr	r3, [pc, #348]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 80029c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c6:	4a56      	ldr	r2, [pc, #344]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 80029c8:	f023 0301 	bic.w	r3, r3, #1
 80029cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029d0:	4b53      	ldr	r3, [pc, #332]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 80029d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d6:	4a52      	ldr	r2, [pc, #328]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 80029d8:	f023 0304 	bic.w	r3, r3, #4
 80029dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d016      	beq.n	8002a16 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e8:	f7fe faa8 	bl	8000f3c <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ee:	e00a      	b.n	8002a06 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f0:	f7fe faa4 	bl	8000f3c <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e140      	b.n	8002c88 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a06:	4b46      	ldr	r3, [pc, #280]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0ed      	beq.n	80029f0 <HAL_RCC_OscConfig+0x388>
 8002a14:	e015      	b.n	8002a42 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a16:	f7fe fa91 	bl	8000f3c <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a1c:	e00a      	b.n	8002a34 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1e:	f7fe fa8d 	bl	8000f3c <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e129      	b.n	8002c88 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a34:	4b3a      	ldr	r3, [pc, #232]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1ed      	bne.n	8002a1e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a42:	7ffb      	ldrb	r3, [r7, #31]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d105      	bne.n	8002a54 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a48:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4c:	4a34      	ldr	r2, [pc, #208]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a52:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0320 	and.w	r3, r3, #32
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d03c      	beq.n	8002ada <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d01c      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a68:	4b2d      	ldr	r3, [pc, #180]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002a6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a6e:	4a2c      	ldr	r2, [pc, #176]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a78:	f7fe fa60 	bl	8000f3c <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a80:	f7fe fa5c 	bl	8000f3c <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e0fa      	b.n	8002c88 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a92:	4b23      	ldr	r3, [pc, #140]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002a94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0ef      	beq.n	8002a80 <HAL_RCC_OscConfig+0x418>
 8002aa0:	e01b      	b.n	8002ada <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002aa2:	4b1f      	ldr	r3, [pc, #124]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002aa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002aa8:	4a1d      	ldr	r2, [pc, #116]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002aaa:	f023 0301 	bic.w	r3, r3, #1
 8002aae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab2:	f7fe fa43 	bl	8000f3c <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aba:	f7fe fa3f 	bl	8000f3c <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e0dd      	b.n	8002c88 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002acc:	4b14      	ldr	r3, [pc, #80]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002ace:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1ef      	bne.n	8002aba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 80d1 	beq.w	8002c86 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ae4:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 030c 	and.w	r3, r3, #12
 8002aec:	2b0c      	cmp	r3, #12
 8002aee:	f000 808b 	beq.w	8002c08 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d15e      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a08      	ldr	r2, [pc, #32]	; (8002b20 <HAL_RCC_OscConfig+0x4b8>)
 8002b00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7fe fa19 	bl	8000f3c <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b0c:	e00c      	b.n	8002b28 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b0e:	f7fe fa15 	bl	8000f3c <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d905      	bls.n	8002b28 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e0b3      	b.n	8002c88 <HAL_RCC_OscConfig+0x620>
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b28:	4b59      	ldr	r3, [pc, #356]	; (8002c90 <HAL_RCC_OscConfig+0x628>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1ec      	bne.n	8002b0e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b34:	4b56      	ldr	r3, [pc, #344]	; (8002c90 <HAL_RCC_OscConfig+0x628>)
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	4b56      	ldr	r3, [pc, #344]	; (8002c94 <HAL_RCC_OscConfig+0x62c>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6a11      	ldr	r1, [r2, #32]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b44:	3a01      	subs	r2, #1
 8002b46:	0112      	lsls	r2, r2, #4
 8002b48:	4311      	orrs	r1, r2
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002b4e:	0212      	lsls	r2, r2, #8
 8002b50:	4311      	orrs	r1, r2
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b56:	0852      	lsrs	r2, r2, #1
 8002b58:	3a01      	subs	r2, #1
 8002b5a:	0552      	lsls	r2, r2, #21
 8002b5c:	4311      	orrs	r1, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b62:	0852      	lsrs	r2, r2, #1
 8002b64:	3a01      	subs	r2, #1
 8002b66:	0652      	lsls	r2, r2, #25
 8002b68:	4311      	orrs	r1, r2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b6e:	06d2      	lsls	r2, r2, #27
 8002b70:	430a      	orrs	r2, r1
 8002b72:	4947      	ldr	r1, [pc, #284]	; (8002c90 <HAL_RCC_OscConfig+0x628>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b78:	4b45      	ldr	r3, [pc, #276]	; (8002c90 <HAL_RCC_OscConfig+0x628>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a44      	ldr	r2, [pc, #272]	; (8002c90 <HAL_RCC_OscConfig+0x628>)
 8002b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b82:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b84:	4b42      	ldr	r3, [pc, #264]	; (8002c90 <HAL_RCC_OscConfig+0x628>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4a41      	ldr	r2, [pc, #260]	; (8002c90 <HAL_RCC_OscConfig+0x628>)
 8002b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b8e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f7fe f9d4 	bl	8000f3c <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b98:	f7fe f9d0 	bl	8000f3c <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e06e      	b.n	8002c88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002baa:	4b39      	ldr	r3, [pc, #228]	; (8002c90 <HAL_RCC_OscConfig+0x628>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCC_OscConfig+0x530>
 8002bb6:	e066      	b.n	8002c86 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb8:	4b35      	ldr	r3, [pc, #212]	; (8002c90 <HAL_RCC_OscConfig+0x628>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a34      	ldr	r2, [pc, #208]	; (8002c90 <HAL_RCC_OscConfig+0x628>)
 8002bbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bc2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002bc4:	4b32      	ldr	r3, [pc, #200]	; (8002c90 <HAL_RCC_OscConfig+0x628>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4a31      	ldr	r2, [pc, #196]	; (8002c90 <HAL_RCC_OscConfig+0x628>)
 8002bca:	f023 0303 	bic.w	r3, r3, #3
 8002bce:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002bd0:	4b2f      	ldr	r3, [pc, #188]	; (8002c90 <HAL_RCC_OscConfig+0x628>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	4a2e      	ldr	r2, [pc, #184]	; (8002c90 <HAL_RCC_OscConfig+0x628>)
 8002bd6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bde:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7fe f9ac 	bl	8000f3c <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be8:	f7fe f9a8 	bl	8000f3c <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e046      	b.n	8002c88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bfa:	4b25      	ldr	r3, [pc, #148]	; (8002c90 <HAL_RCC_OscConfig+0x628>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x580>
 8002c06:	e03e      	b.n	8002c86 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e039      	b.n	8002c88 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002c14:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <HAL_RCC_OscConfig+0x628>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f003 0203 	and.w	r2, r3, #3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d12c      	bne.n	8002c82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	3b01      	subs	r3, #1
 8002c34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d123      	bne.n	8002c82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c44:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d11b      	bne.n	8002c82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d113      	bne.n	8002c82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	085b      	lsrs	r3, r3, #1
 8002c66:	3b01      	subs	r3, #1
 8002c68:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d109      	bne.n	8002c82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c78:	085b      	lsrs	r3, r3, #1
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d001      	beq.n	8002c86 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3720      	adds	r7, #32
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40021000 	.word	0x40021000
 8002c94:	019f800c 	.word	0x019f800c

08002c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e11e      	b.n	8002eee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb0:	4b91      	ldr	r3, [pc, #580]	; (8002ef8 <HAL_RCC_ClockConfig+0x260>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 030f 	and.w	r3, r3, #15
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d910      	bls.n	8002ce0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cbe:	4b8e      	ldr	r3, [pc, #568]	; (8002ef8 <HAL_RCC_ClockConfig+0x260>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 020f 	bic.w	r2, r3, #15
 8002cc6:	498c      	ldr	r1, [pc, #560]	; (8002ef8 <HAL_RCC_ClockConfig+0x260>)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cce:	4b8a      	ldr	r3, [pc, #552]	; (8002ef8 <HAL_RCC_ClockConfig+0x260>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e106      	b.n	8002eee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d073      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d129      	bne.n	8002d48 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf4:	4b81      	ldr	r3, [pc, #516]	; (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0f4      	b.n	8002eee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002d04:	f000 f99e 	bl	8003044 <RCC_GetSysClockFreqFromPLLSource>
 8002d08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4a7c      	ldr	r2, [pc, #496]	; (8002f00 <HAL_RCC_ClockConfig+0x268>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d93f      	bls.n	8002d92 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d12:	4b7a      	ldr	r3, [pc, #488]	; (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d009      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d033      	beq.n	8002d92 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d12f      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d32:	4b72      	ldr	r3, [pc, #456]	; (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d3a:	4a70      	ldr	r2, [pc, #448]	; (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d40:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d42:	2380      	movs	r3, #128	; 0x80
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	e024      	b.n	8002d92 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d107      	bne.n	8002d60 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d50:	4b6a      	ldr	r3, [pc, #424]	; (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d109      	bne.n	8002d70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0c6      	b.n	8002eee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d60:	4b66      	ldr	r3, [pc, #408]	; (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0be      	b.n	8002eee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002d70:	f000 f8ce 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8002d74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4a61      	ldr	r2, [pc, #388]	; (8002f00 <HAL_RCC_ClockConfig+0x268>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d909      	bls.n	8002d92 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d7e:	4b5f      	ldr	r3, [pc, #380]	; (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d86:	4a5d      	ldr	r2, [pc, #372]	; (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d8c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d92:	4b5a      	ldr	r3, [pc, #360]	; (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f023 0203 	bic.w	r2, r3, #3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4957      	ldr	r1, [pc, #348]	; (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da4:	f7fe f8ca 	bl	8000f3c <HAL_GetTick>
 8002da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002daa:	e00a      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dac:	f7fe f8c6 	bl	8000f3c <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e095      	b.n	8002eee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc2:	4b4e      	ldr	r3, [pc, #312]	; (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 020c 	and.w	r2, r3, #12
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d1eb      	bne.n	8002dac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d023      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dec:	4b43      	ldr	r3, [pc, #268]	; (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	4a42      	ldr	r2, [pc, #264]	; (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002df2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002df6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d007      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002e04:	4b3d      	ldr	r3, [pc, #244]	; (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002e0c:	4a3b      	ldr	r2, [pc, #236]	; (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002e0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e14:	4b39      	ldr	r3, [pc, #228]	; (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	4936      	ldr	r1, [pc, #216]	; (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	608b      	str	r3, [r1, #8]
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	2b80      	cmp	r3, #128	; 0x80
 8002e2c:	d105      	bne.n	8002e3a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e2e:	4b33      	ldr	r3, [pc, #204]	; (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	4a32      	ldr	r2, [pc, #200]	; (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002e34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e38:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e3a:	4b2f      	ldr	r3, [pc, #188]	; (8002ef8 <HAL_RCC_ClockConfig+0x260>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d21d      	bcs.n	8002e84 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e48:	4b2b      	ldr	r3, [pc, #172]	; (8002ef8 <HAL_RCC_ClockConfig+0x260>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f023 020f 	bic.w	r2, r3, #15
 8002e50:	4929      	ldr	r1, [pc, #164]	; (8002ef8 <HAL_RCC_ClockConfig+0x260>)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e58:	f7fe f870 	bl	8000f3c <HAL_GetTick>
 8002e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5e:	e00a      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e60:	f7fe f86c 	bl	8000f3c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e03b      	b.n	8002eee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e76:	4b20      	ldr	r3, [pc, #128]	; (8002ef8 <HAL_RCC_ClockConfig+0x260>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d1ed      	bne.n	8002e60 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d008      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e90:	4b1a      	ldr	r3, [pc, #104]	; (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	4917      	ldr	r1, [pc, #92]	; (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d009      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eae:	4b13      	ldr	r3, [pc, #76]	; (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	490f      	ldr	r1, [pc, #60]	; (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ec2:	f000 f825 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	091b      	lsrs	r3, r3, #4
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	490c      	ldr	r1, [pc, #48]	; (8002f04 <HAL_RCC_ClockConfig+0x26c>)
 8002ed4:	5ccb      	ldrb	r3, [r1, r3]
 8002ed6:	f003 031f 	and.w	r3, r3, #31
 8002eda:	fa22 f303 	lsr.w	r3, r2, r3
 8002ede:	4a0a      	ldr	r2, [pc, #40]	; (8002f08 <HAL_RCC_ClockConfig+0x270>)
 8002ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ee2:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <HAL_RCC_ClockConfig+0x274>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd ffdc 	bl	8000ea4 <HAL_InitTick>
 8002eec:	4603      	mov	r3, r0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40022000 	.word	0x40022000
 8002efc:	40021000 	.word	0x40021000
 8002f00:	04c4b400 	.word	0x04c4b400
 8002f04:	080046c8 	.word	0x080046c8
 8002f08:	20000000 	.word	0x20000000
 8002f0c:	20000004 	.word	0x20000004

08002f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b087      	sub	sp, #28
 8002f14:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f16:	4b2c      	ldr	r3, [pc, #176]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d102      	bne.n	8002f28 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f22:	4b2a      	ldr	r3, [pc, #168]	; (8002fcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	e047      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f28:	4b27      	ldr	r3, [pc, #156]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 030c 	and.w	r3, r3, #12
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d102      	bne.n	8002f3a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f34:	4b26      	ldr	r3, [pc, #152]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	e03e      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002f3a:	4b23      	ldr	r3, [pc, #140]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b0c      	cmp	r3, #12
 8002f44:	d136      	bne.n	8002fb4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f46:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f50:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d10c      	bne.n	8002f7e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f64:	4a1a      	ldr	r2, [pc, #104]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6c:	4a16      	ldr	r2, [pc, #88]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f6e:	68d2      	ldr	r2, [r2, #12]
 8002f70:	0a12      	lsrs	r2, r2, #8
 8002f72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f76:	fb02 f303 	mul.w	r3, r2, r3
 8002f7a:	617b      	str	r3, [r7, #20]
      break;
 8002f7c:	e00c      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f7e:	4a13      	ldr	r2, [pc, #76]	; (8002fcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f86:	4a10      	ldr	r2, [pc, #64]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f88:	68d2      	ldr	r2, [r2, #12]
 8002f8a:	0a12      	lsrs	r2, r2, #8
 8002f8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f90:	fb02 f303 	mul.w	r3, r2, r3
 8002f94:	617b      	str	r3, [r7, #20]
      break;
 8002f96:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f98:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	0e5b      	lsrs	r3, r3, #25
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	e001      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002fb8:	693b      	ldr	r3, [r7, #16]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	00f42400 	.word	0x00f42400
 8002fd0:	016e3600 	.word	0x016e3600

08002fd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd8:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fda:	681b      	ldr	r3, [r3, #0]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	20000000 	.word	0x20000000

08002fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ff0:	f7ff fff0 	bl	8002fd4 <HAL_RCC_GetHCLKFreq>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4b06      	ldr	r3, [pc, #24]	; (8003010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	0a1b      	lsrs	r3, r3, #8
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	4904      	ldr	r1, [pc, #16]	; (8003014 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003002:	5ccb      	ldrb	r3, [r1, r3]
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800300c:	4618      	mov	r0, r3
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40021000 	.word	0x40021000
 8003014:	080046d8 	.word	0x080046d8

08003018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800301c:	f7ff ffda 	bl	8002fd4 <HAL_RCC_GetHCLKFreq>
 8003020:	4602      	mov	r2, r0
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	0adb      	lsrs	r3, r3, #11
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	4904      	ldr	r1, [pc, #16]	; (8003040 <HAL_RCC_GetPCLK2Freq+0x28>)
 800302e:	5ccb      	ldrb	r3, [r1, r3]
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003038:	4618      	mov	r0, r3
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40021000 	.word	0x40021000
 8003040:	080046d8 	.word	0x080046d8

08003044 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800304a:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003054:	4b1b      	ldr	r3, [pc, #108]	; (80030c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	091b      	lsrs	r3, r3, #4
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	3301      	adds	r3, #1
 8003060:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	2b03      	cmp	r3, #3
 8003066:	d10c      	bne.n	8003082 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003068:	4a17      	ldr	r2, [pc, #92]	; (80030c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003070:	4a14      	ldr	r2, [pc, #80]	; (80030c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003072:	68d2      	ldr	r2, [r2, #12]
 8003074:	0a12      	lsrs	r2, r2, #8
 8003076:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800307a:	fb02 f303 	mul.w	r3, r2, r3
 800307e:	617b      	str	r3, [r7, #20]
    break;
 8003080:	e00c      	b.n	800309c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003082:	4a12      	ldr	r2, [pc, #72]	; (80030cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	fbb2 f3f3 	udiv	r3, r2, r3
 800308a:	4a0e      	ldr	r2, [pc, #56]	; (80030c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800308c:	68d2      	ldr	r2, [r2, #12]
 800308e:	0a12      	lsrs	r2, r2, #8
 8003090:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003094:	fb02 f303 	mul.w	r3, r2, r3
 8003098:	617b      	str	r3, [r7, #20]
    break;
 800309a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800309c:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	0e5b      	lsrs	r3, r3, #25
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	3301      	adds	r3, #1
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80030b6:	687b      	ldr	r3, [r7, #4]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	371c      	adds	r7, #28
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	40021000 	.word	0x40021000
 80030c8:	016e3600 	.word	0x016e3600
 80030cc:	00f42400 	.word	0x00f42400

080030d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030d8:	2300      	movs	r3, #0
 80030da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030dc:	2300      	movs	r3, #0
 80030de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 8098 	beq.w	800321e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ee:	2300      	movs	r3, #0
 80030f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030f2:	4b43      	ldr	r3, [pc, #268]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10d      	bne.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fe:	4b40      	ldr	r3, [pc, #256]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003102:	4a3f      	ldr	r2, [pc, #252]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003108:	6593      	str	r3, [r2, #88]	; 0x58
 800310a:	4b3d      	ldr	r3, [pc, #244]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800310c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003116:	2301      	movs	r3, #1
 8003118:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800311a:	4b3a      	ldr	r3, [pc, #232]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a39      	ldr	r2, [pc, #228]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003124:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003126:	f7fd ff09 	bl	8000f3c <HAL_GetTick>
 800312a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800312c:	e009      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312e:	f7fd ff05 	bl	8000f3c <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d902      	bls.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	74fb      	strb	r3, [r7, #19]
        break;
 8003140:	e005      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003142:	4b30      	ldr	r3, [pc, #192]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0ef      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800314e:	7cfb      	ldrb	r3, [r7, #19]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d159      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003154:	4b2a      	ldr	r3, [pc, #168]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800315e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d01e      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	429a      	cmp	r2, r3
 800316e:	d019      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003170:	4b23      	ldr	r3, [pc, #140]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800317a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800317c:	4b20      	ldr	r3, [pc, #128]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800317e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003182:	4a1f      	ldr	r2, [pc, #124]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800318c:	4b1c      	ldr	r3, [pc, #112]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003192:	4a1b      	ldr	r2, [pc, #108]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003198:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800319c:	4a18      	ldr	r2, [pc, #96]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d016      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ae:	f7fd fec5 	bl	8000f3c <HAL_GetTick>
 80031b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031b4:	e00b      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b6:	f7fd fec1 	bl	8000f3c <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d902      	bls.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	74fb      	strb	r3, [r7, #19]
            break;
 80031cc:	e006      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ce:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0ec      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80031dc:	7cfb      	ldrb	r3, [r7, #19]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10b      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031e2:	4b07      	ldr	r3, [pc, #28]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	4903      	ldr	r1, [pc, #12]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031f8:	e008      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031fa:	7cfb      	ldrb	r3, [r7, #19]
 80031fc:	74bb      	strb	r3, [r7, #18]
 80031fe:	e005      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003200:	40021000 	.word	0x40021000
 8003204:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003208:	7cfb      	ldrb	r3, [r7, #19]
 800320a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800320c:	7c7b      	ldrb	r3, [r7, #17]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d105      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003212:	4ba6      	ldr	r3, [pc, #664]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003216:	4aa5      	ldr	r2, [pc, #660]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800321c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800322a:	4ba0      	ldr	r3, [pc, #640]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800322c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003230:	f023 0203 	bic.w	r2, r3, #3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	499c      	ldr	r1, [pc, #624]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800324c:	4b97      	ldr	r3, [pc, #604]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003252:	f023 020c 	bic.w	r2, r3, #12
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	4994      	ldr	r1, [pc, #592]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800326e:	4b8f      	ldr	r3, [pc, #572]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003274:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	498b      	ldr	r1, [pc, #556]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003290:	4b86      	ldr	r3, [pc, #536]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003296:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	4983      	ldr	r1, [pc, #524]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0320 	and.w	r3, r3, #32
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032b2:	4b7e      	ldr	r3, [pc, #504]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	497a      	ldr	r1, [pc, #488]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032d4:	4b75      	ldr	r3, [pc, #468]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	4972      	ldr	r1, [pc, #456]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032f6:	4b6d      	ldr	r3, [pc, #436]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	4969      	ldr	r1, [pc, #420]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003318:	4b64      	ldr	r3, [pc, #400]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	4961      	ldr	r1, [pc, #388]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800333a:	4b5c      	ldr	r3, [pc, #368]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800333c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003340:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	4958      	ldr	r1, [pc, #352]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003358:	2b00      	cmp	r3, #0
 800335a:	d015      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800335c:	4b53      	ldr	r3, [pc, #332]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800335e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003362:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336a:	4950      	ldr	r1, [pc, #320]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800336c:	4313      	orrs	r3, r2
 800336e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800337a:	d105      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800337c:	4b4b      	ldr	r3, [pc, #300]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	4a4a      	ldr	r2, [pc, #296]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003382:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003386:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003390:	2b00      	cmp	r3, #0
 8003392:	d015      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003394:	4b45      	ldr	r3, [pc, #276]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a2:	4942      	ldr	r1, [pc, #264]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033b2:	d105      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033b4:	4b3d      	ldr	r3, [pc, #244]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4a3c      	ldr	r2, [pc, #240]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033be:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d015      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80033cc:	4b37      	ldr	r3, [pc, #220]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	4934      	ldr	r1, [pc, #208]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033ea:	d105      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033ec:	4b2f      	ldr	r3, [pc, #188]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	4a2e      	ldr	r2, [pc, #184]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033f6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d015      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003404:	4b29      	ldr	r3, [pc, #164]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003412:	4926      	ldr	r1, [pc, #152]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800341e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003422:	d105      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003424:	4b21      	ldr	r3, [pc, #132]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	4a20      	ldr	r2, [pc, #128]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800342a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800342e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d015      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800343c:	4b1b      	ldr	r3, [pc, #108]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800343e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003442:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344a:	4918      	ldr	r1, [pc, #96]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003456:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800345a:	d105      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800345c:	4b13      	ldr	r3, [pc, #76]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	4a12      	ldr	r2, [pc, #72]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003466:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d015      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003474:	4b0d      	ldr	r3, [pc, #52]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003482:	490a      	ldr	r1, [pc, #40]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003484:	4313      	orrs	r3, r2
 8003486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003492:	d105      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003494:	4b05      	ldr	r3, [pc, #20]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	4a04      	ldr	r2, [pc, #16]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800349a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80034a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40021000 	.word	0x40021000

080034b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e049      	b.n	8003556 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fd fbe0 	bl	8000c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3304      	adds	r3, #4
 80034ec:	4619      	mov	r1, r3
 80034ee:	4610      	mov	r0, r2
 80034f0:	f000 f930 	bl	8003754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003574:	2b01      	cmp	r3, #1
 8003576:	d101      	bne.n	800357c <HAL_TIM_ConfigClockSource+0x1c>
 8003578:	2302      	movs	r3, #2
 800357a:	e0de      	b.n	800373a <HAL_TIM_ConfigClockSource+0x1da>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800359a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800359e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a63      	ldr	r2, [pc, #396]	; (8003744 <HAL_TIM_ConfigClockSource+0x1e4>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	f000 80a9 	beq.w	800370e <HAL_TIM_ConfigClockSource+0x1ae>
 80035bc:	4a61      	ldr	r2, [pc, #388]	; (8003744 <HAL_TIM_ConfigClockSource+0x1e4>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	f200 80ae 	bhi.w	8003720 <HAL_TIM_ConfigClockSource+0x1c0>
 80035c4:	4a60      	ldr	r2, [pc, #384]	; (8003748 <HAL_TIM_ConfigClockSource+0x1e8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	f000 80a1 	beq.w	800370e <HAL_TIM_ConfigClockSource+0x1ae>
 80035cc:	4a5e      	ldr	r2, [pc, #376]	; (8003748 <HAL_TIM_ConfigClockSource+0x1e8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	f200 80a6 	bhi.w	8003720 <HAL_TIM_ConfigClockSource+0x1c0>
 80035d4:	4a5d      	ldr	r2, [pc, #372]	; (800374c <HAL_TIM_ConfigClockSource+0x1ec>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	f000 8099 	beq.w	800370e <HAL_TIM_ConfigClockSource+0x1ae>
 80035dc:	4a5b      	ldr	r2, [pc, #364]	; (800374c <HAL_TIM_ConfigClockSource+0x1ec>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	f200 809e 	bhi.w	8003720 <HAL_TIM_ConfigClockSource+0x1c0>
 80035e4:	4a5a      	ldr	r2, [pc, #360]	; (8003750 <HAL_TIM_ConfigClockSource+0x1f0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	f000 8091 	beq.w	800370e <HAL_TIM_ConfigClockSource+0x1ae>
 80035ec:	4a58      	ldr	r2, [pc, #352]	; (8003750 <HAL_TIM_ConfigClockSource+0x1f0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	f200 8096 	bhi.w	8003720 <HAL_TIM_ConfigClockSource+0x1c0>
 80035f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80035f8:	f000 8089 	beq.w	800370e <HAL_TIM_ConfigClockSource+0x1ae>
 80035fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003600:	f200 808e 	bhi.w	8003720 <HAL_TIM_ConfigClockSource+0x1c0>
 8003604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003608:	d03e      	beq.n	8003688 <HAL_TIM_ConfigClockSource+0x128>
 800360a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800360e:	f200 8087 	bhi.w	8003720 <HAL_TIM_ConfigClockSource+0x1c0>
 8003612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003616:	f000 8086 	beq.w	8003726 <HAL_TIM_ConfigClockSource+0x1c6>
 800361a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800361e:	d87f      	bhi.n	8003720 <HAL_TIM_ConfigClockSource+0x1c0>
 8003620:	2b70      	cmp	r3, #112	; 0x70
 8003622:	d01a      	beq.n	800365a <HAL_TIM_ConfigClockSource+0xfa>
 8003624:	2b70      	cmp	r3, #112	; 0x70
 8003626:	d87b      	bhi.n	8003720 <HAL_TIM_ConfigClockSource+0x1c0>
 8003628:	2b60      	cmp	r3, #96	; 0x60
 800362a:	d050      	beq.n	80036ce <HAL_TIM_ConfigClockSource+0x16e>
 800362c:	2b60      	cmp	r3, #96	; 0x60
 800362e:	d877      	bhi.n	8003720 <HAL_TIM_ConfigClockSource+0x1c0>
 8003630:	2b50      	cmp	r3, #80	; 0x50
 8003632:	d03c      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x14e>
 8003634:	2b50      	cmp	r3, #80	; 0x50
 8003636:	d873      	bhi.n	8003720 <HAL_TIM_ConfigClockSource+0x1c0>
 8003638:	2b40      	cmp	r3, #64	; 0x40
 800363a:	d058      	beq.n	80036ee <HAL_TIM_ConfigClockSource+0x18e>
 800363c:	2b40      	cmp	r3, #64	; 0x40
 800363e:	d86f      	bhi.n	8003720 <HAL_TIM_ConfigClockSource+0x1c0>
 8003640:	2b30      	cmp	r3, #48	; 0x30
 8003642:	d064      	beq.n	800370e <HAL_TIM_ConfigClockSource+0x1ae>
 8003644:	2b30      	cmp	r3, #48	; 0x30
 8003646:	d86b      	bhi.n	8003720 <HAL_TIM_ConfigClockSource+0x1c0>
 8003648:	2b20      	cmp	r3, #32
 800364a:	d060      	beq.n	800370e <HAL_TIM_ConfigClockSource+0x1ae>
 800364c:	2b20      	cmp	r3, #32
 800364e:	d867      	bhi.n	8003720 <HAL_TIM_ConfigClockSource+0x1c0>
 8003650:	2b00      	cmp	r3, #0
 8003652:	d05c      	beq.n	800370e <HAL_TIM_ConfigClockSource+0x1ae>
 8003654:	2b10      	cmp	r3, #16
 8003656:	d05a      	beq.n	800370e <HAL_TIM_ConfigClockSource+0x1ae>
 8003658:	e062      	b.n	8003720 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	6899      	ldr	r1, [r3, #8]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f000 f97f 	bl	800396c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800367c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	609a      	str	r2, [r3, #8]
      break;
 8003686:	e04f      	b.n	8003728 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6818      	ldr	r0, [r3, #0]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	6899      	ldr	r1, [r3, #8]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f000 f968 	bl	800396c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036aa:	609a      	str	r2, [r3, #8]
      break;
 80036ac:	e03c      	b.n	8003728 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6818      	ldr	r0, [r3, #0]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	6859      	ldr	r1, [r3, #4]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	461a      	mov	r2, r3
 80036bc:	f000 f8da 	bl	8003874 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2150      	movs	r1, #80	; 0x50
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 f933 	bl	8003932 <TIM_ITRx_SetConfig>
      break;
 80036cc:	e02c      	b.n	8003728 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	6859      	ldr	r1, [r3, #4]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	461a      	mov	r2, r3
 80036dc:	f000 f8f9 	bl	80038d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2160      	movs	r1, #96	; 0x60
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 f923 	bl	8003932 <TIM_ITRx_SetConfig>
      break;
 80036ec:	e01c      	b.n	8003728 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6818      	ldr	r0, [r3, #0]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	6859      	ldr	r1, [r3, #4]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	461a      	mov	r2, r3
 80036fc:	f000 f8ba 	bl	8003874 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2140      	movs	r1, #64	; 0x40
 8003706:	4618      	mov	r0, r3
 8003708:	f000 f913 	bl	8003932 <TIM_ITRx_SetConfig>
      break;
 800370c:	e00c      	b.n	8003728 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4619      	mov	r1, r3
 8003718:	4610      	mov	r0, r2
 800371a:	f000 f90a 	bl	8003932 <TIM_ITRx_SetConfig>
      break;
 800371e:	e003      	b.n	8003728 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
      break;
 8003724:	e000      	b.n	8003728 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003726:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003738:	7bfb      	ldrb	r3, [r7, #15]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	00100070 	.word	0x00100070
 8003748:	00100040 	.word	0x00100040
 800374c:	00100030 	.word	0x00100030
 8003750:	00100020 	.word	0x00100020

08003754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a3c      	ldr	r2, [pc, #240]	; (8003858 <TIM_Base_SetConfig+0x104>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d00f      	beq.n	800378c <TIM_Base_SetConfig+0x38>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003772:	d00b      	beq.n	800378c <TIM_Base_SetConfig+0x38>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a39      	ldr	r2, [pc, #228]	; (800385c <TIM_Base_SetConfig+0x108>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d007      	beq.n	800378c <TIM_Base_SetConfig+0x38>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a38      	ldr	r2, [pc, #224]	; (8003860 <TIM_Base_SetConfig+0x10c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d003      	beq.n	800378c <TIM_Base_SetConfig+0x38>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a37      	ldr	r2, [pc, #220]	; (8003864 <TIM_Base_SetConfig+0x110>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d108      	bne.n	800379e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a2d      	ldr	r2, [pc, #180]	; (8003858 <TIM_Base_SetConfig+0x104>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d01b      	beq.n	80037de <TIM_Base_SetConfig+0x8a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ac:	d017      	beq.n	80037de <TIM_Base_SetConfig+0x8a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a2a      	ldr	r2, [pc, #168]	; (800385c <TIM_Base_SetConfig+0x108>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d013      	beq.n	80037de <TIM_Base_SetConfig+0x8a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a29      	ldr	r2, [pc, #164]	; (8003860 <TIM_Base_SetConfig+0x10c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00f      	beq.n	80037de <TIM_Base_SetConfig+0x8a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a28      	ldr	r2, [pc, #160]	; (8003864 <TIM_Base_SetConfig+0x110>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00b      	beq.n	80037de <TIM_Base_SetConfig+0x8a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a27      	ldr	r2, [pc, #156]	; (8003868 <TIM_Base_SetConfig+0x114>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d007      	beq.n	80037de <TIM_Base_SetConfig+0x8a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a26      	ldr	r2, [pc, #152]	; (800386c <TIM_Base_SetConfig+0x118>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d003      	beq.n	80037de <TIM_Base_SetConfig+0x8a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a25      	ldr	r2, [pc, #148]	; (8003870 <TIM_Base_SetConfig+0x11c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d108      	bne.n	80037f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a10      	ldr	r2, [pc, #64]	; (8003858 <TIM_Base_SetConfig+0x104>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d00f      	beq.n	800383c <TIM_Base_SetConfig+0xe8>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a11      	ldr	r2, [pc, #68]	; (8003864 <TIM_Base_SetConfig+0x110>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00b      	beq.n	800383c <TIM_Base_SetConfig+0xe8>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a10      	ldr	r2, [pc, #64]	; (8003868 <TIM_Base_SetConfig+0x114>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d007      	beq.n	800383c <TIM_Base_SetConfig+0xe8>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a0f      	ldr	r2, [pc, #60]	; (800386c <TIM_Base_SetConfig+0x118>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d003      	beq.n	800383c <TIM_Base_SetConfig+0xe8>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a0e      	ldr	r2, [pc, #56]	; (8003870 <TIM_Base_SetConfig+0x11c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d103      	bne.n	8003844 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	615a      	str	r2, [r3, #20]
}
 800384a:	bf00      	nop
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40012c00 	.word	0x40012c00
 800385c:	40000400 	.word	0x40000400
 8003860:	40000800 	.word	0x40000800
 8003864:	40013400 	.word	0x40013400
 8003868:	40014000 	.word	0x40014000
 800386c:	40014400 	.word	0x40014400
 8003870:	40014800 	.word	0x40014800

08003874 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	f023 0201 	bic.w	r2, r3, #1
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800389e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f023 030a 	bic.w	r3, r3, #10
 80038b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	621a      	str	r2, [r3, #32]
}
 80038c6:	bf00      	nop
 80038c8:	371c      	adds	r7, #28
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b087      	sub	sp, #28
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	f023 0210 	bic.w	r2, r3, #16
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	031b      	lsls	r3, r3, #12
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4313      	orrs	r3, r2
 8003906:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800390e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	621a      	str	r2, [r3, #32]
}
 8003926:	bf00      	nop
 8003928:	371c      	adds	r7, #28
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003932:	b480      	push	{r7}
 8003934:	b085      	sub	sp, #20
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4313      	orrs	r3, r2
 8003954:	f043 0307 	orr.w	r3, r3, #7
 8003958:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	609a      	str	r2, [r3, #8]
}
 8003960:	bf00      	nop
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
 8003978:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003986:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	021a      	lsls	r2, r3, #8
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	431a      	orrs	r2, r3
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	4313      	orrs	r3, r2
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	609a      	str	r2, [r3, #8]
}
 80039a0:	bf00      	nop
 80039a2:	371c      	adds	r7, #28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e065      	b.n	8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a2c      	ldr	r2, [pc, #176]	; (8003a9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d004      	beq.n	80039f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a2b      	ldr	r2, [pc, #172]	; (8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d108      	bne.n	8003a0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80039fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1b      	ldr	r2, [pc, #108]	; (8003a9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d018      	beq.n	8003a64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3a:	d013      	beq.n	8003a64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a18      	ldr	r2, [pc, #96]	; (8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00e      	beq.n	8003a64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a17      	ldr	r2, [pc, #92]	; (8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d009      	beq.n	8003a64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a12      	ldr	r2, [pc, #72]	; (8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d004      	beq.n	8003a64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a13      	ldr	r2, [pc, #76]	; (8003aac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d10c      	bne.n	8003a7e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	40012c00 	.word	0x40012c00
 8003aa0:	40013400 	.word	0x40013400
 8003aa4:	40000400 	.word	0x40000400
 8003aa8:	40000800 	.word	0x40000800
 8003aac:	40014000 	.word	0x40014000

08003ab0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e042      	b.n	8003b48 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d106      	bne.n	8003ada <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7fd f94b 	bl	8000d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2224      	movs	r2, #36	; 0x24
 8003ade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0201 	bic.w	r2, r2, #1
 8003af0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f82c 	bl	8003b50 <UART_SetConfig>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d101      	bne.n	8003b02 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e022      	b.n	8003b48 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 faec 	bl	80040e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689a      	ldr	r2, [r3, #8]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 fb73 	bl	800422c <UART_CheckIdleState>
 8003b46:	4603      	mov	r3, r0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b54:	b08c      	sub	sp, #48	; 0x30
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	4bab      	ldr	r3, [pc, #684]	; (8003e2c <UART_SetConfig+0x2dc>)
 8003b80:	4013      	ands	r3, r2
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	6812      	ldr	r2, [r2, #0]
 8003b86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4aa0      	ldr	r2, [pc, #640]	; (8003e30 <UART_SetConfig+0x2e0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d004      	beq.n	8003bbc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003bc6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	6812      	ldr	r2, [r2, #0]
 8003bce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	f023 010f 	bic.w	r1, r3, #15
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a91      	ldr	r2, [pc, #580]	; (8003e34 <UART_SetConfig+0x2e4>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d125      	bne.n	8003c40 <UART_SetConfig+0xf0>
 8003bf4:	4b90      	ldr	r3, [pc, #576]	; (8003e38 <UART_SetConfig+0x2e8>)
 8003bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	d81a      	bhi.n	8003c38 <UART_SetConfig+0xe8>
 8003c02:	a201      	add	r2, pc, #4	; (adr r2, 8003c08 <UART_SetConfig+0xb8>)
 8003c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c08:	08003c19 	.word	0x08003c19
 8003c0c:	08003c29 	.word	0x08003c29
 8003c10:	08003c21 	.word	0x08003c21
 8003c14:	08003c31 	.word	0x08003c31
 8003c18:	2301      	movs	r3, #1
 8003c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c1e:	e0d6      	b.n	8003dce <UART_SetConfig+0x27e>
 8003c20:	2302      	movs	r3, #2
 8003c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c26:	e0d2      	b.n	8003dce <UART_SetConfig+0x27e>
 8003c28:	2304      	movs	r3, #4
 8003c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c2e:	e0ce      	b.n	8003dce <UART_SetConfig+0x27e>
 8003c30:	2308      	movs	r3, #8
 8003c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c36:	e0ca      	b.n	8003dce <UART_SetConfig+0x27e>
 8003c38:	2310      	movs	r3, #16
 8003c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c3e:	e0c6      	b.n	8003dce <UART_SetConfig+0x27e>
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a7d      	ldr	r2, [pc, #500]	; (8003e3c <UART_SetConfig+0x2ec>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d138      	bne.n	8003cbc <UART_SetConfig+0x16c>
 8003c4a:	4b7b      	ldr	r3, [pc, #492]	; (8003e38 <UART_SetConfig+0x2e8>)
 8003c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c50:	f003 030c 	and.w	r3, r3, #12
 8003c54:	2b0c      	cmp	r3, #12
 8003c56:	d82d      	bhi.n	8003cb4 <UART_SetConfig+0x164>
 8003c58:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <UART_SetConfig+0x110>)
 8003c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5e:	bf00      	nop
 8003c60:	08003c95 	.word	0x08003c95
 8003c64:	08003cb5 	.word	0x08003cb5
 8003c68:	08003cb5 	.word	0x08003cb5
 8003c6c:	08003cb5 	.word	0x08003cb5
 8003c70:	08003ca5 	.word	0x08003ca5
 8003c74:	08003cb5 	.word	0x08003cb5
 8003c78:	08003cb5 	.word	0x08003cb5
 8003c7c:	08003cb5 	.word	0x08003cb5
 8003c80:	08003c9d 	.word	0x08003c9d
 8003c84:	08003cb5 	.word	0x08003cb5
 8003c88:	08003cb5 	.word	0x08003cb5
 8003c8c:	08003cb5 	.word	0x08003cb5
 8003c90:	08003cad 	.word	0x08003cad
 8003c94:	2300      	movs	r3, #0
 8003c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c9a:	e098      	b.n	8003dce <UART_SetConfig+0x27e>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ca2:	e094      	b.n	8003dce <UART_SetConfig+0x27e>
 8003ca4:	2304      	movs	r3, #4
 8003ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003caa:	e090      	b.n	8003dce <UART_SetConfig+0x27e>
 8003cac:	2308      	movs	r3, #8
 8003cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cb2:	e08c      	b.n	8003dce <UART_SetConfig+0x27e>
 8003cb4:	2310      	movs	r3, #16
 8003cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cba:	e088      	b.n	8003dce <UART_SetConfig+0x27e>
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a5f      	ldr	r2, [pc, #380]	; (8003e40 <UART_SetConfig+0x2f0>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d125      	bne.n	8003d12 <UART_SetConfig+0x1c2>
 8003cc6:	4b5c      	ldr	r3, [pc, #368]	; (8003e38 <UART_SetConfig+0x2e8>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ccc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cd0:	2b30      	cmp	r3, #48	; 0x30
 8003cd2:	d016      	beq.n	8003d02 <UART_SetConfig+0x1b2>
 8003cd4:	2b30      	cmp	r3, #48	; 0x30
 8003cd6:	d818      	bhi.n	8003d0a <UART_SetConfig+0x1ba>
 8003cd8:	2b20      	cmp	r3, #32
 8003cda:	d00a      	beq.n	8003cf2 <UART_SetConfig+0x1a2>
 8003cdc:	2b20      	cmp	r3, #32
 8003cde:	d814      	bhi.n	8003d0a <UART_SetConfig+0x1ba>
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <UART_SetConfig+0x19a>
 8003ce4:	2b10      	cmp	r3, #16
 8003ce6:	d008      	beq.n	8003cfa <UART_SetConfig+0x1aa>
 8003ce8:	e00f      	b.n	8003d0a <UART_SetConfig+0x1ba>
 8003cea:	2300      	movs	r3, #0
 8003cec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cf0:	e06d      	b.n	8003dce <UART_SetConfig+0x27e>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cf8:	e069      	b.n	8003dce <UART_SetConfig+0x27e>
 8003cfa:	2304      	movs	r3, #4
 8003cfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d00:	e065      	b.n	8003dce <UART_SetConfig+0x27e>
 8003d02:	2308      	movs	r3, #8
 8003d04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d08:	e061      	b.n	8003dce <UART_SetConfig+0x27e>
 8003d0a:	2310      	movs	r3, #16
 8003d0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d10:	e05d      	b.n	8003dce <UART_SetConfig+0x27e>
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a4b      	ldr	r2, [pc, #300]	; (8003e44 <UART_SetConfig+0x2f4>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d125      	bne.n	8003d68 <UART_SetConfig+0x218>
 8003d1c:	4b46      	ldr	r3, [pc, #280]	; (8003e38 <UART_SetConfig+0x2e8>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d26:	2bc0      	cmp	r3, #192	; 0xc0
 8003d28:	d016      	beq.n	8003d58 <UART_SetConfig+0x208>
 8003d2a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d2c:	d818      	bhi.n	8003d60 <UART_SetConfig+0x210>
 8003d2e:	2b80      	cmp	r3, #128	; 0x80
 8003d30:	d00a      	beq.n	8003d48 <UART_SetConfig+0x1f8>
 8003d32:	2b80      	cmp	r3, #128	; 0x80
 8003d34:	d814      	bhi.n	8003d60 <UART_SetConfig+0x210>
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <UART_SetConfig+0x1f0>
 8003d3a:	2b40      	cmp	r3, #64	; 0x40
 8003d3c:	d008      	beq.n	8003d50 <UART_SetConfig+0x200>
 8003d3e:	e00f      	b.n	8003d60 <UART_SetConfig+0x210>
 8003d40:	2300      	movs	r3, #0
 8003d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d46:	e042      	b.n	8003dce <UART_SetConfig+0x27e>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d4e:	e03e      	b.n	8003dce <UART_SetConfig+0x27e>
 8003d50:	2304      	movs	r3, #4
 8003d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d56:	e03a      	b.n	8003dce <UART_SetConfig+0x27e>
 8003d58:	2308      	movs	r3, #8
 8003d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d5e:	e036      	b.n	8003dce <UART_SetConfig+0x27e>
 8003d60:	2310      	movs	r3, #16
 8003d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d66:	e032      	b.n	8003dce <UART_SetConfig+0x27e>
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a30      	ldr	r2, [pc, #192]	; (8003e30 <UART_SetConfig+0x2e0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d12a      	bne.n	8003dc8 <UART_SetConfig+0x278>
 8003d72:	4b31      	ldr	r3, [pc, #196]	; (8003e38 <UART_SetConfig+0x2e8>)
 8003d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d80:	d01a      	beq.n	8003db8 <UART_SetConfig+0x268>
 8003d82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d86:	d81b      	bhi.n	8003dc0 <UART_SetConfig+0x270>
 8003d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d8c:	d00c      	beq.n	8003da8 <UART_SetConfig+0x258>
 8003d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d92:	d815      	bhi.n	8003dc0 <UART_SetConfig+0x270>
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <UART_SetConfig+0x250>
 8003d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9c:	d008      	beq.n	8003db0 <UART_SetConfig+0x260>
 8003d9e:	e00f      	b.n	8003dc0 <UART_SetConfig+0x270>
 8003da0:	2300      	movs	r3, #0
 8003da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003da6:	e012      	b.n	8003dce <UART_SetConfig+0x27e>
 8003da8:	2302      	movs	r3, #2
 8003daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dae:	e00e      	b.n	8003dce <UART_SetConfig+0x27e>
 8003db0:	2304      	movs	r3, #4
 8003db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003db6:	e00a      	b.n	8003dce <UART_SetConfig+0x27e>
 8003db8:	2308      	movs	r3, #8
 8003dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dbe:	e006      	b.n	8003dce <UART_SetConfig+0x27e>
 8003dc0:	2310      	movs	r3, #16
 8003dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dc6:	e002      	b.n	8003dce <UART_SetConfig+0x27e>
 8003dc8:	2310      	movs	r3, #16
 8003dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a17      	ldr	r2, [pc, #92]	; (8003e30 <UART_SetConfig+0x2e0>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	f040 80a8 	bne.w	8003f2a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d834      	bhi.n	8003e4c <UART_SetConfig+0x2fc>
 8003de2:	a201      	add	r2, pc, #4	; (adr r2, 8003de8 <UART_SetConfig+0x298>)
 8003de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de8:	08003e0d 	.word	0x08003e0d
 8003dec:	08003e4d 	.word	0x08003e4d
 8003df0:	08003e15 	.word	0x08003e15
 8003df4:	08003e4d 	.word	0x08003e4d
 8003df8:	08003e1b 	.word	0x08003e1b
 8003dfc:	08003e4d 	.word	0x08003e4d
 8003e00:	08003e4d 	.word	0x08003e4d
 8003e04:	08003e4d 	.word	0x08003e4d
 8003e08:	08003e23 	.word	0x08003e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e0c:	f7ff f8ee 	bl	8002fec <HAL_RCC_GetPCLK1Freq>
 8003e10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e12:	e021      	b.n	8003e58 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e14:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <UART_SetConfig+0x2f8>)
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e18:	e01e      	b.n	8003e58 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e1a:	f7ff f879 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8003e1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e20:	e01a      	b.n	8003e58 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e28:	e016      	b.n	8003e58 <UART_SetConfig+0x308>
 8003e2a:	bf00      	nop
 8003e2c:	cfff69f3 	.word	0xcfff69f3
 8003e30:	40008000 	.word	0x40008000
 8003e34:	40013800 	.word	0x40013800
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	40004400 	.word	0x40004400
 8003e40:	40004800 	.word	0x40004800
 8003e44:	40004c00 	.word	0x40004c00
 8003e48:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e56:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 812a 	beq.w	80040b4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	4a9e      	ldr	r2, [pc, #632]	; (80040e0 <UART_SetConfig+0x590>)
 8003e66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	4413      	add	r3, r2
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d305      	bcc.n	8003e90 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d903      	bls.n	8003e98 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e96:	e10d      	b.n	80040b4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	60bb      	str	r3, [r7, #8]
 8003e9e:	60fa      	str	r2, [r7, #12]
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	4a8e      	ldr	r2, [pc, #568]	; (80040e0 <UART_SetConfig+0x590>)
 8003ea6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2200      	movs	r2, #0
 8003eae:	603b      	str	r3, [r7, #0]
 8003eb0:	607a      	str	r2, [r7, #4]
 8003eb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003eb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003eba:	f7fc f9ad 	bl	8000218 <__aeabi_uldivmod>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	f04f 0200 	mov.w	r2, #0
 8003eca:	f04f 0300 	mov.w	r3, #0
 8003ece:	020b      	lsls	r3, r1, #8
 8003ed0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ed4:	0202      	lsls	r2, r0, #8
 8003ed6:	6979      	ldr	r1, [r7, #20]
 8003ed8:	6849      	ldr	r1, [r1, #4]
 8003eda:	0849      	lsrs	r1, r1, #1
 8003edc:	2000      	movs	r0, #0
 8003ede:	460c      	mov	r4, r1
 8003ee0:	4605      	mov	r5, r0
 8003ee2:	eb12 0804 	adds.w	r8, r2, r4
 8003ee6:	eb43 0905 	adc.w	r9, r3, r5
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	469a      	mov	sl, r3
 8003ef2:	4693      	mov	fp, r2
 8003ef4:	4652      	mov	r2, sl
 8003ef6:	465b      	mov	r3, fp
 8003ef8:	4640      	mov	r0, r8
 8003efa:	4649      	mov	r1, r9
 8003efc:	f7fc f98c 	bl	8000218 <__aeabi_uldivmod>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4613      	mov	r3, r2
 8003f06:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f0e:	d308      	bcc.n	8003f22 <UART_SetConfig+0x3d2>
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f16:	d204      	bcs.n	8003f22 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6a3a      	ldr	r2, [r7, #32]
 8003f1e:	60da      	str	r2, [r3, #12]
 8003f20:	e0c8      	b.n	80040b4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f28:	e0c4      	b.n	80040b4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f32:	d167      	bne.n	8004004 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003f34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d828      	bhi.n	8003f8e <UART_SetConfig+0x43e>
 8003f3c:	a201      	add	r2, pc, #4	; (adr r2, 8003f44 <UART_SetConfig+0x3f4>)
 8003f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f42:	bf00      	nop
 8003f44:	08003f69 	.word	0x08003f69
 8003f48:	08003f71 	.word	0x08003f71
 8003f4c:	08003f79 	.word	0x08003f79
 8003f50:	08003f8f 	.word	0x08003f8f
 8003f54:	08003f7f 	.word	0x08003f7f
 8003f58:	08003f8f 	.word	0x08003f8f
 8003f5c:	08003f8f 	.word	0x08003f8f
 8003f60:	08003f8f 	.word	0x08003f8f
 8003f64:	08003f87 	.word	0x08003f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f68:	f7ff f840 	bl	8002fec <HAL_RCC_GetPCLK1Freq>
 8003f6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f6e:	e014      	b.n	8003f9a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f70:	f7ff f852 	bl	8003018 <HAL_RCC_GetPCLK2Freq>
 8003f74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f76:	e010      	b.n	8003f9a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f78:	4b5a      	ldr	r3, [pc, #360]	; (80040e4 <UART_SetConfig+0x594>)
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f7c:	e00d      	b.n	8003f9a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f7e:	f7fe ffc7 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8003f82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f84:	e009      	b.n	8003f9a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f8c:	e005      	b.n	8003f9a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8089 	beq.w	80040b4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	4a4e      	ldr	r2, [pc, #312]	; (80040e0 <UART_SetConfig+0x590>)
 8003fa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fac:	461a      	mov	r2, r3
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fb4:	005a      	lsls	r2, r3, #1
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	085b      	lsrs	r3, r3, #1
 8003fbc:	441a      	add	r2, r3
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	2b0f      	cmp	r3, #15
 8003fcc:	d916      	bls.n	8003ffc <UART_SetConfig+0x4ac>
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd4:	d212      	bcs.n	8003ffc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	f023 030f 	bic.w	r3, r3, #15
 8003fde:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	085b      	lsrs	r3, r3, #1
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	8bfb      	ldrh	r3, [r7, #30]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	8bfa      	ldrh	r2, [r7, #30]
 8003ff8:	60da      	str	r2, [r3, #12]
 8003ffa:	e05b      	b.n	80040b4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004002:	e057      	b.n	80040b4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004004:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004008:	2b08      	cmp	r3, #8
 800400a:	d828      	bhi.n	800405e <UART_SetConfig+0x50e>
 800400c:	a201      	add	r2, pc, #4	; (adr r2, 8004014 <UART_SetConfig+0x4c4>)
 800400e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004012:	bf00      	nop
 8004014:	08004039 	.word	0x08004039
 8004018:	08004041 	.word	0x08004041
 800401c:	08004049 	.word	0x08004049
 8004020:	0800405f 	.word	0x0800405f
 8004024:	0800404f 	.word	0x0800404f
 8004028:	0800405f 	.word	0x0800405f
 800402c:	0800405f 	.word	0x0800405f
 8004030:	0800405f 	.word	0x0800405f
 8004034:	08004057 	.word	0x08004057
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004038:	f7fe ffd8 	bl	8002fec <HAL_RCC_GetPCLK1Freq>
 800403c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800403e:	e014      	b.n	800406a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004040:	f7fe ffea 	bl	8003018 <HAL_RCC_GetPCLK2Freq>
 8004044:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004046:	e010      	b.n	800406a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004048:	4b26      	ldr	r3, [pc, #152]	; (80040e4 <UART_SetConfig+0x594>)
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800404c:	e00d      	b.n	800406a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800404e:	f7fe ff5f 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8004052:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004054:	e009      	b.n	800406a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800405a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800405c:	e005      	b.n	800406a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004068:	bf00      	nop
    }

    if (pclk != 0U)
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	2b00      	cmp	r3, #0
 800406e:	d021      	beq.n	80040b4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	4a1a      	ldr	r2, [pc, #104]	; (80040e0 <UART_SetConfig+0x590>)
 8004076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800407a:	461a      	mov	r2, r3
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	085b      	lsrs	r3, r3, #1
 8004088:	441a      	add	r2, r3
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004092:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	2b0f      	cmp	r3, #15
 8004098:	d909      	bls.n	80040ae <UART_SetConfig+0x55e>
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a0:	d205      	bcs.n	80040ae <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60da      	str	r2, [r3, #12]
 80040ac:	e002      	b.n	80040b4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	2201      	movs	r2, #1
 80040c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2200      	movs	r2, #0
 80040c8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2200      	movs	r2, #0
 80040ce:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80040d0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3730      	adds	r7, #48	; 0x30
 80040d8:	46bd      	mov	sp, r7
 80040da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040de:	bf00      	nop
 80040e0:	080046e0 	.word	0x080046e0
 80040e4:	00f42400 	.word	0x00f42400

080040e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417c:	f003 0310 	and.w	r3, r3, #16
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d01a      	beq.n	80041fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041e6:	d10a      	bne.n	80041fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	605a      	str	r2, [r3, #4]
  }
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af02      	add	r7, sp, #8
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800423c:	f7fc fe7e 	bl	8000f3c <HAL_GetTick>
 8004240:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b08      	cmp	r3, #8
 800424e:	d10e      	bne.n	800426e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004250:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f82f 	bl	80042c2 <UART_WaitOnFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e025      	b.n	80042ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b04      	cmp	r3, #4
 800427a:	d10e      	bne.n	800429a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800427c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f819 	bl	80042c2 <UART_WaitOnFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e00f      	b.n	80042ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2220      	movs	r2, #32
 800429e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b09c      	sub	sp, #112	; 0x70
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	603b      	str	r3, [r7, #0]
 80042ce:	4613      	mov	r3, r2
 80042d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d2:	e0a9      	b.n	8004428 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042da:	f000 80a5 	beq.w	8004428 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042de:	f7fc fe2d 	bl	8000f3c <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d302      	bcc.n	80042f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80042ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d140      	bne.n	8004376 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042fc:	e853 3f00 	ldrex	r3, [r3]
 8004300:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004304:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004308:	667b      	str	r3, [r7, #100]	; 0x64
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004312:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004314:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004318:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e6      	bne.n	80042f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3308      	adds	r3, #8
 800432c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	663b      	str	r3, [r7, #96]	; 0x60
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3308      	adds	r3, #8
 8004344:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004346:	64ba      	str	r2, [r7, #72]	; 0x48
 8004348:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800434c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800434e:	e841 2300 	strex	r3, r2, [r1]
 8004352:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1e5      	bne.n	8004326 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2220      	movs	r2, #32
 800435e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2220      	movs	r2, #32
 8004366:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e069      	b.n	800444a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	d051      	beq.n	8004428 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800438e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004392:	d149      	bne.n	8004428 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800439c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a6:	e853 3f00 	ldrex	r3, [r3]
 80043aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	461a      	mov	r2, r3
 80043ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043bc:	637b      	str	r3, [r7, #52]	; 0x34
 80043be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043c4:	e841 2300 	strex	r3, r2, [r1]
 80043c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e6      	bne.n	800439e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3308      	adds	r3, #8
 80043d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	e853 3f00 	ldrex	r3, [r3]
 80043de:	613b      	str	r3, [r7, #16]
   return(result);
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f023 0301 	bic.w	r3, r3, #1
 80043e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3308      	adds	r3, #8
 80043ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043f0:	623a      	str	r2, [r7, #32]
 80043f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f4:	69f9      	ldr	r1, [r7, #28]
 80043f6:	6a3a      	ldr	r2, [r7, #32]
 80043f8:	e841 2300 	strex	r3, r2, [r1]
 80043fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1e5      	bne.n	80043d0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2220      	movs	r2, #32
 8004408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2220      	movs	r2, #32
 8004410:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2220      	movs	r2, #32
 8004418:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e010      	b.n	800444a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	69da      	ldr	r2, [r3, #28]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	4013      	ands	r3, r2
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	429a      	cmp	r2, r3
 8004436:	bf0c      	ite	eq
 8004438:	2301      	moveq	r3, #1
 800443a:	2300      	movne	r3, #0
 800443c:	b2db      	uxtb	r3, r3
 800443e:	461a      	mov	r2, r3
 8004440:	79fb      	ldrb	r3, [r7, #7]
 8004442:	429a      	cmp	r2, r3
 8004444:	f43f af46 	beq.w	80042d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3770      	adds	r7, #112	; 0x70
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004452:	b480      	push	{r7}
 8004454:	b085      	sub	sp, #20
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_UARTEx_DisableFifoMode+0x16>
 8004464:	2302      	movs	r3, #2
 8004466:	e027      	b.n	80044b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2224      	movs	r2, #36	; 0x24
 8004474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0201 	bic.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004496:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80044d8:	2302      	movs	r3, #2
 80044da:	e02d      	b.n	8004538 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2224      	movs	r2, #36	; 0x24
 80044e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0201 	bic.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f84f 	bl	80045bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004554:	2302      	movs	r3, #2
 8004556:	e02d      	b.n	80045b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2224      	movs	r2, #36	; 0x24
 8004564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0201 	bic.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f811 	bl	80045bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d108      	bne.n	80045de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80045dc:	e031      	b.n	8004642 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80045de:	2308      	movs	r3, #8
 80045e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80045e2:	2308      	movs	r3, #8
 80045e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	0e5b      	lsrs	r3, r3, #25
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	f003 0307 	and.w	r3, r3, #7
 80045f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	0f5b      	lsrs	r3, r3, #29
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004606:	7bbb      	ldrb	r3, [r7, #14]
 8004608:	7b3a      	ldrb	r2, [r7, #12]
 800460a:	4911      	ldr	r1, [pc, #68]	; (8004650 <UARTEx_SetNbDataToProcess+0x94>)
 800460c:	5c8a      	ldrb	r2, [r1, r2]
 800460e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004612:	7b3a      	ldrb	r2, [r7, #12]
 8004614:	490f      	ldr	r1, [pc, #60]	; (8004654 <UARTEx_SetNbDataToProcess+0x98>)
 8004616:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004618:	fb93 f3f2 	sdiv	r3, r3, r2
 800461c:	b29a      	uxth	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	7b7a      	ldrb	r2, [r7, #13]
 8004628:	4909      	ldr	r1, [pc, #36]	; (8004650 <UARTEx_SetNbDataToProcess+0x94>)
 800462a:	5c8a      	ldrb	r2, [r1, r2]
 800462c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004630:	7b7a      	ldrb	r2, [r7, #13]
 8004632:	4908      	ldr	r1, [pc, #32]	; (8004654 <UARTEx_SetNbDataToProcess+0x98>)
 8004634:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004636:	fb93 f3f2 	sdiv	r3, r3, r2
 800463a:	b29a      	uxth	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004642:	bf00      	nop
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	080046f8 	.word	0x080046f8
 8004654:	08004700 	.word	0x08004700

08004658 <memset>:
 8004658:	4402      	add	r2, r0
 800465a:	4603      	mov	r3, r0
 800465c:	4293      	cmp	r3, r2
 800465e:	d100      	bne.n	8004662 <memset+0xa>
 8004660:	4770      	bx	lr
 8004662:	f803 1b01 	strb.w	r1, [r3], #1
 8004666:	e7f9      	b.n	800465c <memset+0x4>

08004668 <__libc_init_array>:
 8004668:	b570      	push	{r4, r5, r6, lr}
 800466a:	4d0d      	ldr	r5, [pc, #52]	; (80046a0 <__libc_init_array+0x38>)
 800466c:	4c0d      	ldr	r4, [pc, #52]	; (80046a4 <__libc_init_array+0x3c>)
 800466e:	1b64      	subs	r4, r4, r5
 8004670:	10a4      	asrs	r4, r4, #2
 8004672:	2600      	movs	r6, #0
 8004674:	42a6      	cmp	r6, r4
 8004676:	d109      	bne.n	800468c <__libc_init_array+0x24>
 8004678:	4d0b      	ldr	r5, [pc, #44]	; (80046a8 <__libc_init_array+0x40>)
 800467a:	4c0c      	ldr	r4, [pc, #48]	; (80046ac <__libc_init_array+0x44>)
 800467c:	f000 f818 	bl	80046b0 <_init>
 8004680:	1b64      	subs	r4, r4, r5
 8004682:	10a4      	asrs	r4, r4, #2
 8004684:	2600      	movs	r6, #0
 8004686:	42a6      	cmp	r6, r4
 8004688:	d105      	bne.n	8004696 <__libc_init_array+0x2e>
 800468a:	bd70      	pop	{r4, r5, r6, pc}
 800468c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004690:	4798      	blx	r3
 8004692:	3601      	adds	r6, #1
 8004694:	e7ee      	b.n	8004674 <__libc_init_array+0xc>
 8004696:	f855 3b04 	ldr.w	r3, [r5], #4
 800469a:	4798      	blx	r3
 800469c:	3601      	adds	r6, #1
 800469e:	e7f2      	b.n	8004686 <__libc_init_array+0x1e>
 80046a0:	08004710 	.word	0x08004710
 80046a4:	08004710 	.word	0x08004710
 80046a8:	08004710 	.word	0x08004710
 80046ac:	08004714 	.word	0x08004714

080046b0 <_init>:
 80046b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b2:	bf00      	nop
 80046b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046b6:	bc08      	pop	{r3}
 80046b8:	469e      	mov	lr, r3
 80046ba:	4770      	bx	lr

080046bc <_fini>:
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046be:	bf00      	nop
 80046c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c2:	bc08      	pop	{r3}
 80046c4:	469e      	mov	lr, r3
 80046c6:	4770      	bx	lr
